// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as ApolloLinks from "@wildcards/reason-apollo/src/ApolloLinks.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ApolloLink from "apollo-link";
import * as ReasonApollo from "@wildcards/reason-apollo/src/ReasonApollo.bs.js";
import * as ApolloLinkWs from "apollo-link-ws";
import * as ApolloUtilities from "apollo-utilities";
import * as ApolloInMemoryCache from "@wildcards/reason-apollo/src/ApolloInMemoryCache.bs.js";

function inMemoryCache(param) {
  return ApolloInMemoryCache.createInMemoryCache(undefined, undefined, Caml_option.some(({
        HomeAnimal:
        {
          wildcardData: (_, args, { getCacheKey }) => {
        let result = getCacheKey({ __typename: 'WildcardData', id: args.id })
        console.log('getting wildcard data', result)
        return result
      }
        },
        HomeAnimals:
        {
          wildcardData: (_, args, { getCacheKey }) => {
        let result = getCacheKey({ __typename: 'WildcardData', id: args.id })
        console.log('getting wildcard data', result)
        return result
      }
        },
        homeAnimal:
        {
          wildcardData: (_, args, { getCacheKey }) => {
        let result = getCacheKey({ __typename: 'WildcardData', id: args.id })
        console.log('2getting wildcard data', result)
        return result
      }
        },
        homeAnimals:
        {
          wildcardData: (_, args, { getCacheKey }) => {
        let result = getCacheKey({ __typename: 'WildcardData', id: args.id })
        console.log('2getting wildcard data', result)
        return result
      }
        },
        AnimalId:
        {
          wildcardData: (_, args, { getCacheKey }) => {
        let result = getCacheKey({ __typename: 'WildcardData', id: args.id })
        console.log('2getting wildcard data', result)
        return result
      }},
        AnimalIds:
        {
          wildcardData: (_, args, { getCacheKey }) => {
        let result = getCacheKey({ __typename: 'WildcardData', id: args.id })
        console.log('2getting wildcard data', result)
        return result
      }
        },
    Query: {
          wildcardDatas: (_, args, { getCacheKey }) => {
            console.log('datatttaaa');
        let result = getCacheKey({ __typename: 'WildcardData', id: args.id })
        console.log('2getting wildcard data', result)
        return result
      },
          wildcardData: (_, args, { getCacheKey }) => {
            console.log('datatttaaa');
        let result = getCacheKey({ __typename: 'WildcardData', id: args.id })
        console.log('2getting wildcard data', result)
        return result
      },
      global: (_, args, { getCacheKey }) => {
        let result = getCacheKey({ __typename: 'Global', id: args.id })
        return result
      },
      wildcard: (_, args, { getCacheKey }) => {
        const result = getCacheKey({ __typename: 'Wildcard', id: args.id})
        return result
      },
      // global: (_, args, { getCacheKey }) => {
      //   let result = getCacheKey({ __typename: 'Global', id: args.id + 'wc' })
      //   // console.log("the result within", result)
      //   return result
      // },
      // wildcard: (_, args, { getCacheKey }) => {
      //   return getCacheKey({ __typename: 'Wildcard', id: args.id + 'wc' })
      // },
    },
    // Subscription: {
    //   global: (_, args, { getCacheKey }) => {
    //     let result = getCacheKey({ __typename: 'Global', id: args.id })
    //     console.log("the result within", result)
    //     return result
    //   },
    //   wildcard: (_, args, { getCacheKey }) => {
    //     return getCacheKey({ __typename: 'Wildcard', id: args.id })
    //   },
    // },
  })), undefined, undefined);
}

function httpLink(uri) {
  return ApolloLinks.createHttpLink(uri, undefined, undefined, undefined, undefined, undefined, undefined);
}

function wsLink(uri) {
  return new ApolloLinkWs.WebSocketLink({
              uri: uri,
              options: {
                reconnect: true,
                connectionParams: undefined
              }
            });
}

function webSocketHttpLink(uri, subscriptions) {
  return ApolloLink.split((function (operation) {
                var operationDefition = ApolloUtilities.getMainDefinition(operation.query);
                if (operationDefition.kind === "OperationDefinition") {
                  return operationDefition.operation === "subscription";
                } else {
                  return false;
                }
              }), wsLink(subscriptions), ApolloLink.split((function (operation) {
                    var match = operation.getContext();
                    if (match !== undefined && match.context) {
                      return true;
                    } else {
                      return false;
                    }
                  }), httpLink("https://api.mumbai-graph.matic.today/subgraphs/name/wildcards-world/matic-mumbai/graphql"), httpLink(uri)));
}

function instance(getGraphEndpoints) {
  var match = Curry._1(getGraphEndpoints, undefined);
  return ReasonApollo.createApolloClient(webSocketHttpLink(match[0], match[1]), inMemoryCache(undefined), undefined, undefined, undefined, undefined, undefined);
}

export {
  inMemoryCache ,
  httpLink ,
  wsLink ,
  webSocketHttpLink ,
  instance ,
  
}
/* ApolloLinks Not a pure module */
