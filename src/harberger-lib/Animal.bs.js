// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as BnJs from "bn.js";
import * as React from "react";
import * as Moment from "moment";
import * as MomentRe from "bs-moment/src/MomentRe.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Helper$WildCards from "./Helper.bs.js";
import * as Globals$WildCards from "./Globals.bs.js";
import * as QlHooks$WildCards from "./QlHooks.bs.js";
import * as TokenId$WildCards from "./TokenId.bs.js";

var getAnimal = TokenId$WildCards.make;

var cdnBase = "https://dd2wadt5nc0o7.cloudfront.net";

function useAvatar(animal) {
  return Globals$WildCards.$pipe$pipe$pipe$pipe(Belt_Option.map(QlHooks$WildCards.useWildcardAvatar(animal), (function (a) {
                    return cdnBase + a;
                  })), "./img/animals/comingsoon.png");
}

function useAlternateImage(animal) {
  return Belt_Option.flatMap(Belt_Option.map(QlHooks$WildCards.useRealImages(animal), (function (animalImages) {
                    return Belt_Array.map(animalImages, (function (info) {
                                  return info.image;
                                }));
                  })), (function (images) {
                return Belt_Array.get(images, 0);
              }));
}

function useGetOrgImage(org) {
  return Globals$WildCards.$pipe$pipe$pipe$pipe(Belt_Option.map(QlHooks$WildCards.useLoadOrganisationLogo(org), (function (path) {
                    return cdnBase + path;
                  })), "https://dd2wadt5nc0o7.cloudfront.net/conservations/OGBage.png");
}

function useGetOrgBadge(org) {
  return Globals$WildCards.$pipe$pipe$pipe$pipe(Belt_Option.map(QlHooks$WildCards.useLoadOrganisationLogo(org), (function (path) {
                    return cdnBase + path;
                  })), "https://dd2wadt5nc0o7.cloudfront.net/conservations/OGBage.png");
}

function useGetOrgBadgeImage(animal) {
  return useGetOrgBadge(Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardOrgId(animal), ""));
}

var nextLaunchDate = Moment.utc("2020-07-30T17:00:00");

function isLaunched(animal) {
  TokenId$WildCards.toString(animal);
  return /* Launched */0;
}

function useTokenStatus(chain, animal) {
  var optLaunchTime = QlHooks$WildCards.useLaunchTimeBN(chain, animal);
  var currentTime = QlHooks$WildCards.useCurrentTimestampBn(undefined);
  var currentPriceWei = QlHooks$WildCards.usePrice(chain, animal);
  if (optLaunchTime === undefined) {
    return /* Loading */0;
  }
  var launchTime = Caml_option.valFromOption(optLaunchTime);
  if (launchTime.gt(currentTime)) {
    return /* WaitingForLaunch */Block.__(0, [MomentRe.momentWithUnix(launchTime.toNumber())]);
  }
  if (typeof currentPriceWei === "number") {
    return /* Loading */0;
  }
  if (!currentPriceWei.tag) {
    return /* Foreclosed */Block.__(3, [Helper$WildCards.bnToMoment(currentPriceWei[0])]);
  }
  var price = currentPriceWei[0];
  if (price.gt(new BnJs.default("0"))) {
    return /* Owned */Block.__(2, [price]);
  } else {
    return /* Launched */Block.__(1, [MomentRe.momentWithUnix(launchTime.toNumber())]);
  }
}

function useIsOnAuction(chain, animal) {
  var tokenStatus = useTokenStatus(chain, animal);
  if (typeof tokenStatus === "number") {
    return false;
  }
  switch (tokenStatus.tag | 0) {
    case /* Launched */1 :
    case /* Foreclosed */3 :
        return true;
    default:
      return false;
  }
}

function useAuctionPriceWei(chain, animal, launchTime) {
  var tokenStatus = useTokenStatus(chain, animal);
  var auctionStartPrice = QlHooks$WildCards.useAuctionStartPrice(animal);
  var auctionEndPrice = QlHooks$WildCards.useAuctionEndPrice(animal);
  var auctionLength = QlHooks$WildCards.useAuctioLength(animal);
  var currentTime = QlHooks$WildCards.useCurrentTime(undefined);
  if (typeof tokenStatus === "number") {
    return auctionEndPrice;
  }
  switch (tokenStatus.tag | 0) {
    case /* Launched */1 :
        if (Globals$WildCards.$pipe$less$pipe(new BnJs.default(currentTime), Globals$WildCards.$pipe$plus$pipe(launchTime, auctionLength))) {
          return Globals$WildCards.$pipe$neg$pipe(auctionStartPrice, Globals$WildCards.$pipe$slash$pipe(Globals$WildCards.$pipe$star$pipe(Globals$WildCards.$pipe$neg$pipe(auctionStartPrice, auctionEndPrice), Globals$WildCards.$pipe$neg$pipe(new BnJs.default(currentTime), launchTime)), auctionLength));
        } else {
          return auctionEndPrice;
        }
    case /* Foreclosed */3 :
        var auctionStartTime = new BnJs.default(tokenStatus[0].unix());
        if (Globals$WildCards.$pipe$less$pipe(new BnJs.default(currentTime), Globals$WildCards.$pipe$plus$pipe(auctionStartTime, auctionLength))) {
          return Globals$WildCards.$pipe$neg$pipe(auctionStartPrice, Globals$WildCards.$pipe$slash$pipe(Globals$WildCards.$pipe$star$pipe(Globals$WildCards.$pipe$neg$pipe(auctionStartPrice, auctionEndPrice), Globals$WildCards.$pipe$neg$pipe(new BnJs.default(currentTime), auctionStartTime)), auctionLength));
        } else {
          return auctionEndPrice;
        }
    default:
      return auctionEndPrice;
  }
}

function getChainIdFromAnimalId(animalId) {
  var a = Globals$WildCards.$pipe$pipe$pipe$pipe(TokenId$WildCards.toInt(animalId), 0);
  if (a < 26 || a === 42) {
    return /* MainnetQuery */2;
  } else {
    return /* MaticQuery */1;
  }
}

function useChainIdFromAnimalId(animalId) {
  return React.useMemo((function () {
                return getChainIdFromAnimalId(animalId);
              }), [animalId]);
}

export {
  getAnimal ,
  cdnBase ,
  useAvatar ,
  useAlternateImage ,
  useGetOrgImage ,
  useGetOrgBadge ,
  useGetOrgBadgeImage ,
  nextLaunchDate ,
  isLaunched ,
  useTokenStatus ,
  useIsOnAuction ,
  useAuctionPriceWei ,
  getChainIdFromAnimalId ,
  useChainIdFromAnimalId ,
  
}
/* nextLaunchDate Not a pure module */
