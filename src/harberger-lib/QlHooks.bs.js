// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Decco from "decco/src/Decco.bs.js";
import BnJs from "bn.js";
import * as React from "react";
import * as Moment from "moment";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_math from "bs-platform/lib/es6/js_math.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Belt_Result from "bs-platform/lib/es6/belt_Result.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Helper$WildCards from "./Helper.bs.js";
import * as Globals$WildCards from "./Globals.bs.js";
import * as TokenId$WildCards from "./TokenId.bs.js";
import * as RootProvider$WildCards from "./RootProvider.bs.js";
import * as GqlConverters$WildCards from "../gql/GqlConverters.bs.js";

function decodeBN(number) {
  return new BnJs(Belt_Option.mapWithDefault(Js_json.decodeString(number), "0", (function (a) {
                    return a;
                  })));
}

var Raw = {};

function parse(value) {
  var value$1 = value.wildcards;
  var value$2 = value.global;
  return {
          wildcards: value$1.map(function (value) {
                var value$1 = value.owner;
                var value$2 = value.price;
                var value$3 = value.auctionStartPrice;
                return {
                        id: value.id,
                        animal: GqlConverters$WildCards.GqlTokenId.parse(value.animal),
                        owner: {
                          address: value$1.address,
                          id: value$1.id
                        },
                        price: {
                          price: GqlConverters$WildCards.Price.parse(value$2.price),
                          id: value$2.id
                        },
                        totalCollected: GqlConverters$WildCards.Price.parse(value.totalCollected),
                        timeCollected: GqlConverters$WildCards.$$BigInt.parse(value.timeCollected),
                        patronageNumeratorPriceScaled: GqlConverters$WildCards.$$BigInt.parse(value.patronageNumeratorPriceScaled),
                        timeAcquired: GqlConverters$WildCards.GqlMoment.parse(value.timeAcquired),
                        auctionStartPrice: !(value$3 == null) ? Caml_option.some(GqlConverters$WildCards.$$BigInt.parse(value$3)) : undefined,
                        launchTime: GqlConverters$WildCards.$$BigInt.parse(value.launchTime)
                      };
              }),
          global: !(value$2 == null) ? ({
                id: value$2.id,
                totalCollectedOrDueAccurate: GqlConverters$WildCards.$$BigInt.parse(value$2.totalCollectedOrDueAccurate),
                timeLastCollected: GqlConverters$WildCards.$$BigInt.parse(value$2.timeLastCollected),
                totalTokenCostScaledNumeratorAccurate: GqlConverters$WildCards.$$BigInt.parse(value$2.totalTokenCostScaledNumeratorAccurate),
                defaultAuctionLength: GqlConverters$WildCards.$$BigInt.parse(value$2.defaultAuctionLength),
                defaultAuctionEndPrice: GqlConverters$WildCards.$$BigInt.parse(value$2.defaultAuctionEndPrice),
                defaultAuctionStartPrice: GqlConverters$WildCards.$$BigInt.parse(value$2.defaultAuctionStartPrice)
              }) : undefined
        };
}

function serialize(value) {
  var value$1 = value.global;
  var $$global;
  if (value$1 !== undefined) {
    var value$2 = value$1.defaultAuctionStartPrice;
    var value$3 = GqlConverters$WildCards.$$BigInt.serialize(value$2);
    var value$4 = value$1.defaultAuctionEndPrice;
    var value$5 = GqlConverters$WildCards.$$BigInt.serialize(value$4);
    var value$6 = value$1.defaultAuctionLength;
    var value$7 = GqlConverters$WildCards.$$BigInt.serialize(value$6);
    var value$8 = value$1.totalTokenCostScaledNumeratorAccurate;
    var value$9 = GqlConverters$WildCards.$$BigInt.serialize(value$8);
    var value$10 = value$1.timeLastCollected;
    var value$11 = GqlConverters$WildCards.$$BigInt.serialize(value$10);
    var value$12 = value$1.totalCollectedOrDueAccurate;
    var value$13 = GqlConverters$WildCards.$$BigInt.serialize(value$12);
    var value$14 = value$1.id;
    $$global = {
      id: value$14,
      totalCollectedOrDueAccurate: value$13,
      timeLastCollected: value$11,
      totalTokenCostScaledNumeratorAccurate: value$9,
      defaultAuctionLength: value$7,
      defaultAuctionEndPrice: value$5,
      defaultAuctionStartPrice: value$3
    };
  } else {
    $$global = null;
  }
  var value$15 = value.wildcards;
  var wildcards = value$15.map(function (value) {
        var value$1 = value.launchTime;
        var value$2 = GqlConverters$WildCards.$$BigInt.serialize(value$1);
        var value$3 = value.auctionStartPrice;
        var auctionStartPrice = value$3 !== undefined ? GqlConverters$WildCards.$$BigInt.serialize(Caml_option.valFromOption(value$3)) : null;
        var value$4 = value.timeAcquired;
        var value$5 = GqlConverters$WildCards.GqlMoment.serialize(value$4);
        var value$6 = value.patronageNumeratorPriceScaled;
        var value$7 = GqlConverters$WildCards.$$BigInt.serialize(value$6);
        var value$8 = value.timeCollected;
        var value$9 = GqlConverters$WildCards.$$BigInt.serialize(value$8);
        var value$10 = value.totalCollected;
        var value$11 = GqlConverters$WildCards.Price.serialize(value$10);
        var value$12 = value.price;
        var value$13 = value$12.id;
        var value$14 = value$12.price;
        var value$15 = GqlConverters$WildCards.Price.serialize(value$14);
        var price = {
          price: value$15,
          id: value$13
        };
        var value$16 = value.owner;
        var value$17 = value$16.id;
        var value$18 = value$16.address;
        var owner = {
          address: value$18,
          id: value$17
        };
        var value$19 = value.animal;
        var value$20 = GqlConverters$WildCards.GqlTokenId.serialize(value$19);
        var value$21 = value.id;
        return {
                id: value$21,
                animal: value$20,
                owner: owner,
                price: price,
                totalCollected: value$11,
                timeCollected: value$9,
                patronageNumeratorPriceScaled: value$7,
                timeAcquired: value$5,
                auctionStartPrice: auctionStartPrice,
                launchTime: value$2
              };
      });
  return {
          wildcards: wildcards,
          global: $$global
        };
}

function serializeVariables(inp) {
  return {
          amount: inp.amount,
          globalId: inp.globalId
        };
}

function makeVariables(amount, globalId, param) {
  return {
          amount: amount,
          globalId: globalId
        };
}

var InitialLoad = {
  Raw: Raw,
  query: "query ($amount: Int!, $globalId: String!)  {\nwildcards(first: $amount)  {\nid  \nanimal: tokenId  \nowner  {\naddress  \nid  \n}\n\nprice  {\nprice  \nid  \n}\n\ntotalCollected  \ntimeCollected  \npatronageNumeratorPriceScaled  \ntimeAcquired  \nauctionStartPrice  \nlaunchTime  \n}\n\nglobal(id: $globalId)  {\nid  \ntotalCollectedOrDueAccurate  \ntimeLastCollected  \ntotalTokenCostScaledNumeratorAccurate  \ndefaultAuctionLength  \ndefaultAuctionEndPrice  \ndefaultAuctionStartPrice  \n}\n\n}\n",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

function createContext(prim) {
  return prim;
}

function useInitialDataLoad(chain) {
  console.log(chain);
  
}

function useAnimalList(chain) {
  console.log(chain);
  return React.useMemo((function () {
                return Globals$WildCards.$pipe$pipe$pipe$pipe(Globals$WildCards.oMap(undefined, (function (data) {
                                  return Belt_Array.map(data.wildcards, (function (wc) {
                                                return wc.animal;
                                              }));
                                })), []);
              }), [
              undefined,
              chain
            ]);
}

function getQueryPrefix(chain) {
  if (chain !== 1) {
    return "";
  } else {
    return "matic";
  }
}

function subscriptionResultOptionMap(result, mapping) {
  console.log(result, mapping);
  
}

function subscriptionResultToOption(result) {
  return subscriptionResultOptionMap(result, (function (a) {
                return a;
              }));
}

function queryResultOptionMap(result, mapping) {
  console.log(result, mapping);
  
}

function queryResultOptionFlatMap(result, mapping) {
  console.log(result, mapping);
  
}

function queryResultToOption(result) {
  return queryResultOptionMap(result, (function (a) {
                return a;
              }));
}

function useWildcardQuery(chain, tokenId) {
  return [
          chain,
          tokenId
        ];
}

function useLoadTokenDataArrayQuery(chain, tokenIdArray) {
  return [
          chain,
          tokenIdArray
        ];
}

function useWildcardDataQuery(tokenId) {
  return tokenId;
}

function useHomeAnimalsQuery(param) {
  
}

function useStateChangeSubscription(param) {
  
}

function useLoadOrganisationQuery(orgId) {
  return orgId;
}

function useStateChangeSubscriptionData(param) {
  return subscriptionResultOptionMap(undefined[0], (function (a) {
                return a;
              }));
}

function useLoadOrganisationData(orgId) {
  console.log(orgId);
  
}

function useLoadOrganisationLogo(orgId) {
  console.log(orgId);
  
}

function useLoadOrganisationLogoBadge(orgId) {
  console.log(orgId);
  
}

function useHomePageAnimalsData(param) {
  return queryResultOptionMap(undefined[0], (function (a) {
                return a;
              }));
}

function useHomePageAnimalArrayOpt(param) {
  return Globals$WildCards.oMap(useHomePageAnimalsData(undefined), (function (homeAnimals) {
                return Belt_Array.map(homeAnimals.homeAnimals, (function (animal) {
                              return {
                                      id: TokenId$WildCards.fromStringUnsafe(animal.id),
                                      prev: TokenId$WildCards.fromStringUnsafe(animal.prev),
                                      next: TokenId$WildCards.fromStringUnsafe(animal.next)
                                    };
                            }));
              }));
}

function useHomePageAnimalArray(param) {
  return Globals$WildCards.$pipe$pipe$pipe$pipe(useHomePageAnimalArrayOpt(undefined), []);
}

function useDetailsPageNextPrevious(currentToken) {
  var homepageAnimalData = useHomePageAnimalArray(undefined);
  var defaultValue_id = TokenId$WildCards.fromStringUnsafe("2");
  var defaultValue_prev = TokenId$WildCards.fromStringUnsafe("0");
  var defaultValue_next = TokenId$WildCards.fromStringUnsafe("1");
  var defaultValue = {
    id: defaultValue_id,
    prev: defaultValue_prev,
    next: defaultValue_next
  };
  var forwardNextLookup = React.useMemo((function () {
          return Belt_Array.reduce(homepageAnimalData, {}, (function (dict, item) {
                        dict[TokenId$WildCards.toString(item.id)] = item;
                        return dict;
                      }));
        }), [homepageAnimalData]);
  return Globals$WildCards.$pipe$pipe$pipe$pipe(Js_dict.get(forwardNextLookup, TokenId$WildCards.toString(currentToken)), defaultValue);
}

function animalDescription_decode(v) {
  return Decco.arrayFromJson(Decco.stringFromJson, v);
}

function useWildcardDescription(tokenId) {
  return queryResultOptionMap(tokenId[0], (function (a) {
                return Globals$WildCards.$pipe$pipe$pipe$pipe(Globals$WildCards.oMap(a.launchedWildcards_by_pk, (function (b) {
                                  var v = b.wildcard.description;
                                  return Belt_Result.getWithDefault(Decco.arrayFromJson(Decco.stringFromJson, v), []);
                                })), []);
              }));
}

function useWildcardName(tokenId) {
  return queryResultOptionFlatMap(tokenId[0], (function (a) {
                return Belt_Option.flatMap(a.launchedWildcards_by_pk, (function (b) {
                              return b.wildcard.name;
                            }));
              }));
}

function useWildcardAvatar(tokenId) {
  return queryResultOptionFlatMap(tokenId[0], (function (a) {
                return Belt_Option.flatMap(a.launchedWildcards_by_pk, (function (b) {
                              return b.wildcard.image;
                            }));
              }));
}

function useWildcardArtist(tokenId) {
  return queryResultOptionFlatMap(tokenId[0], (function (a) {
                return Belt_Option.flatMap(a.launchedWildcards_by_pk, (function (b) {
                              return b.wildcard.artistOfWildcard;
                            }));
              }));
}

function useRealImages(tokenId) {
  return queryResultOptionFlatMap(tokenId[0], (function (a) {
                return Belt_Option.map(a.launchedWildcards_by_pk, (function (b) {
                              return b.wildcard.real_wc_photos;
                            }));
              }));
}

function useWildcardOrgId(tokenId) {
  return queryResultOptionFlatMap(tokenId[0], (function (a) {
                return Belt_Option.map(Belt_Option.flatMap(a.launchedWildcards_by_pk, (function (b) {
                                  return b.wildcard.organization;
                                })), (function (org) {
                              return org.id;
                            }));
              }));
}

function useWildcardOrgName(tokenId) {
  return queryResultOptionFlatMap(tokenId[0], (function (a) {
                return Belt_Option.map(Belt_Option.flatMap(a.launchedWildcards_by_pk, (function (b) {
                                  return b.wildcard.organization;
                                })), (function (org) {
                              return org.name;
                            }));
              }));
}

function useLoadTopContributors(numberOfLeaders) {
  console.log(numberOfLeaders);
  
}

function useLoadTopContributorsData(numberOfLeaders) {
  console.log(numberOfLeaders);
  
}

function usePatron(chain, animal) {
  var getAddress = function (response) {
    return Belt_Option.flatMap(response.wildcard, (function (wildcard) {
                  return Caml_option.some(wildcard.owner.address);
                }));
  };
  return queryResultOptionFlatMap(chain, getAddress);
}

function useIsAnimalOwened(chain, ownedAnimal) {
  var currentAccount = Belt_Option.mapWithDefault(RootProvider$WildCards.useCurrentUser(undefined), "loading", (function (a) {
          return a;
        }));
  var currentPatron = Belt_Option.mapWithDefault(usePatron(chain, ownedAnimal), "no-patron-defined", (function (a) {
          return a;
        }));
  return currentAccount.toLowerCase() === currentPatron.toLocaleLowerCase();
}

function useTimeAcquired(chain, animal) {
  var getTimeAquired = function (response) {
    return Belt_Option.mapWithDefault(response.wildcard, Moment(), (function (wildcard) {
                  return wildcard.timeAcquired;
                }));
  };
  return queryResultOptionMap(chain, getTimeAquired);
}

function useQueryPatron(chain, patron) {
  console.log(chain, patron);
  
}

function useQueryPatronNew(patron) {
  console.log(patron);
  
}

function useForeclosureTimeBn(chain, patron) {
  console.log(chain, patron);
  
}

function useForeclosureTime(chain, patron) {
  return Belt_Option.map(useForeclosureTimeBn(chain, patron), Helper$WildCards.bnToMoment);
}

function usePatronQuery(chain, patron) {
  console.log(chain, patron);
  
}

function useTimeAcquiredWithDefault(chain, animal, $$default) {
  return Globals$WildCards.$pipe$pipe$pipe$pipe(useTimeAcquired(chain, animal), $$default);
}

function useDaysHeld(chain, tokenId) {
  return Globals$WildCards.oMap(useTimeAcquired(chain, tokenId), (function (moment) {
                return [
                        Moment().diff(moment, "days"),
                        moment
                      ];
              }));
}

function useTotalCollectedOrDue(param) {
  
}

function getCurrentTimestamp(param) {
  return String(Js_math.floor(Date.now() / 1000));
}

function useCurrentTime(param) {
  var match = React.useState(function () {
        return getCurrentTimestamp(undefined);
      });
  var setTimeLeft = match[1];
  React.useEffect((function () {
          var interval = setInterval((function (param) {
                  return Curry._1(setTimeLeft, (function (param) {
                                return getCurrentTimestamp(undefined);
                              }));
                }), 2000);
          return (function (param) {
                    clearInterval(interval);
                    
                  });
        }), [setTimeLeft]);
  return match[0];
}

function useCurrentTimestampBn(param) {
  return new BnJs(useCurrentTime(undefined));
}

function useAmountRaised(param) {
  var currentTimestamp = useCurrentTime(undefined);
  return Globals$WildCards.oMap(undefined, (function (param) {
                var timeElapsed = new BnJs(currentTimestamp).sub(param[1]);
                var amountRaisedSinceLastCollection = param[2].mul(timeElapsed).div(new BnJs("31536000000000000000"));
                return param[0].add(amountRaisedSinceLastCollection);
              }));
}

function useTotalCollectedToken(chain, animal) {
  var getTotalCollectedData = function (response) {
    return Globals$WildCards.oMap(response.wildcard, (function (wc) {
                  return [
                          wc.totalCollected,
                          wc.timeCollected,
                          wc.patronageNumeratorPriceScaled
                        ];
                }));
  };
  return queryResultOptionFlatMap(chain, getTotalCollectedData);
}

function useTotalCollectedTokenArray(chain, animalArray) {
  return queryResultOptionMap(chain, (function (a) {
                return a;
              }));
}

function usePatronageNumerator(chain, tokenId) {
  var patronageNumerator = function (response) {
    return Belt_Option.map(response.wildcard, (function (wildcard) {
                  return wildcard.patronageNumerator;
                }));
  };
  return queryResultOptionFlatMap(chain, patronageNumerator);
}

function usePledgeRate(chain, tokenId) {
  var optPatronageNumerator = usePatronageNumerator(chain, tokenId);
  return React.useMemo((function () {
                if (optPatronageNumerator === undefined) {
                  return 0;
                }
                var result = Globals$WildCards.$pipe$slash$pipe(Caml_option.valFromOption(optPatronageNumerator), new BnJs("12000000000"));
                return result.toNumber() / 1000;
              }), [optPatronageNumerator]);
}

function usePledgeRateDetailed(chain, tokenId) {
  var pledgeRate = usePledgeRate(chain, tokenId);
  var inversePledgeRate = 1 / pledgeRate;
  var numeratorOverYear = String(pledgeRate * 1200 | 0);
  return [
          numeratorOverYear,
          "100",
          pledgeRate,
          inversePledgeRate
        ];
}

function usePatronLoyaltyTokenDetails(chain, address) {
  console.log(chain, address);
  
}

function useAmountRaisedToken(chain, animal) {
  var currentTimestamp = useCurrentTime(undefined);
  var match = useTotalCollectedToken(chain, animal);
  if (match === undefined) {
    return ;
  }
  var timeElapsed = new BnJs(currentTimestamp).sub(match[1]);
  var amountRaisedSinceLastCollection = match[2].mul(timeElapsed).div(new BnJs("31536000000000000000"));
  return Caml_option.some(match[0].add(amountRaisedSinceLastCollection));
}

function calculateTotalRaised(currentTimestamp, param) {
  var timeElapsed = new BnJs(currentTimestamp).sub(param[1]);
  var amountRaisedSinceLastCollection = param[2].mul(timeElapsed).div(new BnJs("31536000000000000000"));
  return param[0].add(amountRaisedSinceLastCollection);
}

function useTotalRaisedAnimalGroup(animals) {
  var currentTimestamp = useCurrentTime(undefined);
  var detailsMainnet = useTotalCollectedTokenArray(/* MainnetQuery */2, animals);
  var detailsMatic = useTotalCollectedTokenArray(/* MaticQuery */1, Belt_Array.map(animals, (function (id) {
              return "matic" + id;
            })));
  return [
          detailsMainnet !== undefined ? Caml_option.some(Belt_Array.reduce(Caml_option.valFromOption(detailsMainnet).wildcards, new BnJs("0"), (function (acc, animalDetails) {
                        return Globals$WildCards.$pipe$plus$pipe(calculateTotalRaised(currentTimestamp, [
                                        animalDetails.totalCollected,
                                        animalDetails.timeCollected,
                                        animalDetails.patronageNumeratorPriceScaled
                                      ]), acc);
                      }))) : undefined,
          detailsMatic !== undefined ? Caml_option.some(Belt_Array.reduce(Caml_option.valFromOption(detailsMatic).wildcards, new BnJs("0"), (function (acc, animalDetails) {
                        return Globals$WildCards.$pipe$plus$pipe(calculateTotalRaised(currentTimestamp, [
                                        animalDetails.totalCollected,
                                        animalDetails.timeCollected,
                                        animalDetails.patronageNumeratorPriceScaled
                                      ]), acc);
                      }))) : undefined
        ];
}

function useTimeSinceTokenWasLastSettled(chain, animal) {
  var currentTimestamp = useCurrentTime(undefined);
  var match = useTotalCollectedToken(chain, animal);
  if (match !== undefined) {
    return Caml_option.some(new BnJs(currentTimestamp).sub(match[1]));
  }
  
}

function useUnredeemedLoyaltyTokenDueForUser(chain, animal, numberOfTokens) {
  var timeSinceTokenWasLastSettled = useTimeSinceTokenWasLastSettled(chain, animal);
  if (timeSinceTokenWasLastSettled === undefined) {
    return ;
  }
  var totalLoyaltyTokensPerSecondPerAnimal = new BnJs("11574074074074");
  return Caml_option.some(Globals$WildCards.$pipe$star$pipe(Globals$WildCards.$pipe$star$pipe(Caml_option.valFromOption(timeSinceTokenWasLastSettled), totalLoyaltyTokensPerSecondPerAnimal), new BnJs(numberOfTokens)));
}

function useTotalLoyaltyToken(chain, patron) {
  var currentTimestamp = useCurrentTime(undefined);
  var match = usePatronLoyaltyTokenDetails(chain, patron);
  if (match === undefined) {
    return ;
  }
  var timeElapsed = Globals$WildCards.$pipe$neg$pipe(new BnJs(currentTimestamp), match.lastCollected);
  var totalLoyaltyTokensPerSecondPerAnimal = new BnJs("11574074074074");
  var totalLoyaltyTokensFor1Animal = Globals$WildCards.$pipe$star$pipe(totalLoyaltyTokensPerSecondPerAnimal, timeElapsed);
  var totalLoyaltyTokensForAllAnimals = Globals$WildCards.$pipe$star$pipe(match.numberOfAnimalsOwned, totalLoyaltyTokensFor1Animal);
  var totalLoyaltyTokensForUser = Globals$WildCards.$pipe$plus$pipe(match.currentLoyaltyTokensIncludingUnredeemed, totalLoyaltyTokensForAllAnimals);
  return [
          totalLoyaltyTokensForUser,
          match.currentLoyaltyTokens
        ];
}

function useRemainingDeposit(chain, patron) {
  console.log(chain, patron);
  
}

function useRemainingDepositEth(chain, patron) {
  var currentTimestamp = useCurrentTime(undefined);
  var match = useRemainingDeposit(chain, patron);
  if (match === undefined) {
    return ;
  }
  var timeElapsed = new BnJs(currentTimestamp).sub(match[1]);
  var amountRaisedSinceLastCollection = match[2].mul(timeElapsed).div(new BnJs("31536000000000000000"));
  return Caml_option.some(match[0].sub(amountRaisedSinceLastCollection));
}

function usePrice(chain, animal) {
  console.log(chain, animal);
  return /* Loading */0;
}

function useIsForeclosed(chain, currentPatron) {
  var optAvailableDeposit = useRemainingDepositEth(chain, currentPatron);
  return Belt_Option.mapWithDefault(optAvailableDeposit, true, (function (availableDeposit) {
                return !availableDeposit.gt(new BnJs("0"));
              }));
}

function useAuctionStartPrice(chain, _tokenId) {
  console.log(chain);
  return Belt_Option.map(Belt_Option.flatMap(undefined, (function (data) {
                    return data.global;
                  })), (function ($$global) {
                return $$global.defaultAuctionStartPrice;
              }));
}

function useAuctionEndPrice(chain, _tokenId) {
  console.log(chain);
  return Belt_Option.map(Belt_Option.flatMap(undefined, (function (data) {
                    return data.global;
                  })), (function ($$global) {
                return $$global.defaultAuctionEndPrice;
              }));
}

function useAuctioLength(chain, _tokenId) {
  console.log(chain);
  return Belt_Option.map(Belt_Option.flatMap(undefined, (function (data) {
                    return data.global;
                  })), (function ($$global) {
                return $$global.defaultAuctionLength;
              }));
}

function useLaunchTimeBN(chain, tokenId) {
  console.log(chain, tokenId);
  
}

function useMaticStateQuery(forceRefetch, address, network) {
  console.log(forceRefetch, address, network);
  
}

function useMaticState(forceRefetch, address, network) {
  console.log(forceRefetch, address, network);
  
}

var Raw$1 = {};

function parse$1(value) {
  var value$1 = value.metaTx;
  var value$2 = value$1.errorMsg;
  return {
          metaTx: {
            txHash: value$1.txHash,
            success: value$1.success,
            errorMsg: !(value$2 == null) ? value$2 : undefined
          }
        };
}

function serialize$1(value) {
  var value$1 = value.metaTx;
  var value$2 = value$1.errorMsg;
  var errorMsg = value$2 !== undefined ? value$2 : null;
  var value$3 = value$1.success;
  var value$4 = value$1.txHash;
  var metaTx = {
    txHash: value$4,
    success: value$3,
    errorMsg: errorMsg
  };
  return {
          metaTx: metaTx
        };
}

function serializeVariables$1(inp) {
  return {
          network: inp.network,
          r: inp.r,
          s: inp.s,
          v: inp.v,
          userAddress: inp.userAddress,
          functionSignature: inp.functionSignature
        };
}

function makeVariables$1(network, r, s, v, userAddress, functionSignature, param) {
  return {
          network: network,
          r: r,
          s: s,
          v: v,
          userAddress: userAddress,
          functionSignature: functionSignature
        };
}

var ExecuteMetaTxMutation = {
  Raw: Raw$1,
  query: "mutation ($network: String!, $r: String!, $s: String!, $v: Int!, $userAddress: String!, $functionSignature: String!)  {\nmetaTx(functionSignature: $functionSignature, network: $network, r: $r, s: $s, userAddress: $userAddress, v: $v)  {\ntxHash  \nsuccess  \nerrorMsg  \n}\n\n}\n",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

function useMetaTx(param) {
  
}

function useArtistQuery(artistIdentifier) {
  console.log(artistIdentifier);
  
}

function useArtistData(artistIdentifier) {
  console.log(artistIdentifier);
  
}

function useArtistEthAddress(artistIdentifier) {
  console.log(artistIdentifier);
  return Belt_Option.flatMap(undefined, (function (data) {
                return data.eth_address;
              }));
}

function useArtistName(artistIdentifier) {
  console.log(artistIdentifier);
  return Belt_Option.map(undefined, (function (data) {
                return data.name;
              }));
}

function useArtistWebsite(artistIdentifier) {
  console.log(artistIdentifier);
  return Belt_Option.flatMap(undefined, (function (data) {
                return data.website;
              }));
}

function useArtistLaunchedWildcards(artistIdentifier) {
  console.log(artistIdentifier);
  return Belt_Option.map(undefined, (function (data) {
                return data.launchedWildcards;
              }));
}

function useArtistUnlaunchedWildcards(artistIdentifier) {
  console.log(artistIdentifier);
  return Belt_Option.map(undefined, (function (data) {
                return data.unlaunchedWildcards;
              }));
}

function useArtistOrgs(artistIdentifier) {
  console.log(artistIdentifier);
  return Belt_Option.map(undefined, (function (data) {
                var dict = {};
                Belt_Array.map(data.launchedWildcards, (function (wildcard) {
                        var org = wildcard.organization;
                        if (org === undefined) {
                          return ;
                        }
                        var org$1 = Caml_option.valFromOption(org);
                        var orgId = org$1.id;
                        var orgObj = Js_dict.get(dict, orgId);
                        if (orgObj !== undefined) {
                          var newOrgObj_id = orgObj.id;
                          var newOrgObj_name = orgObj.name;
                          var newOrgObj_logo = orgObj.logo;
                          var newOrgObj_wildcards = Belt_Array.concat(orgObj.wildcards, [wildcard.key]);
                          var newOrgObj = {
                            id: newOrgObj_id,
                            name: newOrgObj_name,
                            logo: newOrgObj_logo,
                            wildcards: newOrgObj_wildcards
                          };
                          dict[orgId] = newOrgObj;
                          return ;
                        }
                        dict[orgId] = {
                          id: orgId,
                          name: org$1.name,
                          logo: org$1.logo,
                          wildcards: [wildcard.key]
                        };
                        
                      }));
                return Js_dict.values(dict);
              }));
}

export {
  decodeBN ,
  InitialLoad ,
  createContext ,
  useInitialDataLoad ,
  useAnimalList ,
  getQueryPrefix ,
  subscriptionResultOptionMap ,
  subscriptionResultToOption ,
  queryResultOptionMap ,
  queryResultOptionFlatMap ,
  queryResultToOption ,
  useWildcardQuery ,
  useLoadTokenDataArrayQuery ,
  useWildcardDataQuery ,
  useHomeAnimalsQuery ,
  useStateChangeSubscription ,
  useLoadOrganisationQuery ,
  useStateChangeSubscriptionData ,
  useLoadOrganisationData ,
  useLoadOrganisationLogo ,
  useLoadOrganisationLogoBadge ,
  useHomePageAnimalsData ,
  useHomePageAnimalArrayOpt ,
  useHomePageAnimalArray ,
  useDetailsPageNextPrevious ,
  animalDescription_decode ,
  useWildcardDescription ,
  useWildcardName ,
  useWildcardAvatar ,
  useWildcardArtist ,
  useRealImages ,
  useWildcardOrgId ,
  useWildcardOrgName ,
  useLoadTopContributors ,
  useLoadTopContributorsData ,
  usePatron ,
  useIsAnimalOwened ,
  useTimeAcquired ,
  useQueryPatron ,
  useQueryPatronNew ,
  useForeclosureTimeBn ,
  useForeclosureTime ,
  usePatronQuery ,
  useTimeAcquiredWithDefault ,
  useDaysHeld ,
  useTotalCollectedOrDue ,
  getCurrentTimestamp ,
  useCurrentTime ,
  useCurrentTimestampBn ,
  useAmountRaised ,
  useTotalCollectedToken ,
  useTotalCollectedTokenArray ,
  usePatronageNumerator ,
  usePledgeRate ,
  usePledgeRateDetailed ,
  usePatronLoyaltyTokenDetails ,
  useAmountRaisedToken ,
  calculateTotalRaised ,
  useTotalRaisedAnimalGroup ,
  useTimeSinceTokenWasLastSettled ,
  useUnredeemedLoyaltyTokenDueForUser ,
  useTotalLoyaltyToken ,
  useRemainingDeposit ,
  useRemainingDepositEth ,
  usePrice ,
  useIsForeclosed ,
  useAuctionStartPrice ,
  useAuctionEndPrice ,
  useAuctioLength ,
  useLaunchTimeBN ,
  useMaticStateQuery ,
  useMaticState ,
  ExecuteMetaTxMutation ,
  useMetaTx ,
  useArtistQuery ,
  useArtistData ,
  useArtistEthAddress ,
  useArtistName ,
  useArtistWebsite ,
  useArtistLaunchedWildcards ,
  useArtistUnlaunchedWildcards ,
  useArtistOrgs ,
  
}
/* bn.js Not a pure module */
