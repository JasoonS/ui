// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Ethers from "ethers";
import * as $$Promise from "reason-promise/src/js/promise.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Core from "@web3-react/core";
import * as Globals$WildCards from "../Globals.bs.js";
import * as RootProvider$WildCards from "../RootProvider.bs.js";
import * as VoteContractJson from "./abi/voteContract.json";
import * as WrapSignerInGsnProvider from "./wrapSignerInGsnProvider";

var wrapSignerInGsnProvider = WrapSignerInGsnProvider.default;

function getProviderOrSigner(library, account, isGsn) {
  if (account !== undefined) {
    if (isGsn) {
      return wrapSignerInGsnProvider(library.provider, library.getSigner(account));
    } else {
      return library.getSigner(account);
    }
  } else {
    return library;
  }
}

var voteContract = VoteContractJson.voteContract;

function getExchangeContract(stewardAddress, stewardAbi, library, account, isGsn) {
  return new Ethers.Contract(stewardAddress, stewardAbi, getProviderOrSigner(library, account, isGsn));
}

var erc20 = "0x9fcb777f6c1c160029004d959C0e0eA7175eEeB1";

function useStewardAbi(param) {
  return (require("./gsn-steward-abi.json"));
}

function defaultStewardAddressFromChainId(param) {
  return erc20;
}

function useStewardAddress(param) {
  var externallySetAddress = RootProvider$WildCards.useStewardContractAddress(undefined);
  return (function (chainId) {
      return Belt_Option.mapWithDefault(externallySetAddress, erc20, (function (a) {
                    return a;
                  }));
    });
}

function useStewardContract(isGsn) {
  var context = Core.useWeb3React();
  var stewardContractAddress = useStewardAddress(undefined);
  var stewardAbi = useStewardAbi(undefined);
  return React.useMemo((function () {
                var match = context.library;
                var match$1 = context.chainId;
                if (match !== undefined && match$1 !== undefined) {
                  return Globals$WildCards.oMap(Curry._1(stewardContractAddress, match$1), (function (__x) {
                                return getExchangeContract(__x, stewardAbi, match, context.account, isGsn);
                              }));
                }
                
              }), /* tuple */[
              context.library,
              context.account,
              context.chainId
            ]);
}

function useMint(isGsn) {
  var match = React.useState((function () {
          return /* UnInitialised */0;
        }));
  var setTxState = match[1];
  var optSteward = useStewardContract(isGsn);
  return /* tuple */[
          (function (param) {
              var value = Ethers.utils.parseUnits("0", 18);
              console.log("This is something");
              Curry._1(setTxState, (function (param) {
                      return /* Created */1;
                    }));
              if (optSteward === undefined) {
                return ;
              }
              var buyPromise = $$Promise.Js.toResult(optSteward.testFunctionThatDoesNothing("0xeb2D9aAfD2b3d74D288c022Ab5b58396A4a6c677", {
                        value: value,
                        from: undefined
                      }));
              $$Promise.getOk(buyPromise, (function (tx) {
                      Curry._1(setTxState, (function (param) {
                              return /* SignedAndSubmitted */Block.__(0, [tx.hash]);
                            }));
                      var txMinedPromise = $$Promise.Js.toResult(tx.wait());
                      $$Promise.getOk(txMinedPromise, (function (txOutcome) {
                              console.log(txOutcome);
                              return Curry._1(setTxState, (function (param) {
                                            return /* Complete */Block.__(2, [txOutcome]);
                                          }));
                            }));
                      $$Promise.getError(txMinedPromise, (function (error) {
                              Curry._1(setTxState, (function (param) {
                                      return /* Failed */2;
                                    }));
                              console.log(error);
                              
                            }));
                      
                    }));
              $$Promise.getError(buyPromise, (function (error) {
                      return Curry._1(setTxState, (function (param) {
                                    return /* Declined */Block.__(1, [error.message]);
                                  }));
                    }));
              
            }),
          match[0]
        ];
}

export {
  wrapSignerInGsnProvider ,
  getProviderOrSigner ,
  voteContract ,
  getExchangeContract ,
  erc20 ,
  useStewardAbi ,
  defaultStewardAddressFromChainId ,
  useStewardAddress ,
  useStewardContract ,
  useMint ,
  
}
/* wrapSignerInGsnProvider Not a pure module */
