// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Web3Utils from "web3-utils";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Core from "@web3-react/core";
import * as InputHelp$WildCards from "../InputHelp.bs.js";
import UpdateDepositInput from "./UpdateDepositInput";
import * as TxTemplate$WildCards from "../../components/components/TxTemplate.bs.js";
import * as ContractActions$WildCards from "../eth/ContractActions.bs.js";

var make = UpdateDepositInput;

var UpdateDepositInput$1 = {
  make: make
};

function getToDisplay(label, value) {
  return label + (": " + Belt_Option.mapWithDefault(value, "loading", (function (a) {
                  return a;
                })));
}

function UpdateDeposit(Props) {
  var closeButtonText = Props.closeButtonText;
  var chain = Props.chain;
  var match = React.useState(function () {
        return "";
      });
  var setDepositChange = match[1];
  var depositChange = match[0];
  var match$1 = React.useState(function () {
        return true;
      });
  var setIsAddDeposit = match$1[1];
  var isAddDeposit = match$1[0];
  var web3Context = Core.useWeb3React();
  var match$2 = ContractActions$WildCards.useUpdateDeposit(chain, web3Context.library, web3Context.account, Belt_Option.getWithDefault(web3Context.chainId, 1));
  var depositFunc = match$2[0];
  var match$3 = ContractActions$WildCards.useWithdrawDeposit(chain, web3Context.library, web3Context.account, Belt_Option.getWithDefault(web3Context.chainId, 1));
  var withdrawFunc = match$3[0];
  var onSubmitDepositChange = function ($$event) {
    $$event.preventDefault();
    var depositChangeWei = Web3Utils.toWei(depositChange, "ether");
    if (isAddDeposit) {
      return Curry._1(depositFunc, depositChangeWei);
    } else {
      return Curry._1(withdrawFunc, depositChangeWei);
    }
  };
  var updateDepositChange = function ($$event) {
    $$event.preventDefault();
    return InputHelp$WildCards.onlyUpdateIfPositiveFloat(depositChange, setDepositChange, $$event);
  };
  var updateIsAddDeposit = function (isDeposit) {
    return Curry._1(setIsAddDeposit, (function (param) {
                  return isDeposit;
                }));
  };
  return React.createElement(TxTemplate$WildCards.make, {
              children: React.createElement(TxTemplate$WildCards.make, {
                    children: React.createElement(make, {
                          depositChange: depositChange,
                          updateDepositChange: updateDepositChange,
                          isAddDeposit: isAddDeposit,
                          updateIsAddDeposit: updateIsAddDeposit,
                          onSubmitDepositChange: onSubmitDepositChange
                        }),
                    txState: match$2[1],
                    closeButtonText: closeButtonText,
                    chain: chain
                  }),
              txState: match$3[1],
              closeButtonText: closeButtonText,
              chain: chain
            });
}

var make$1 = UpdateDeposit;

export {
  UpdateDepositInput$1 as UpdateDepositInput,
  getToDisplay ,
  make$1 as make,
  
}
/* make Not a pure module */
