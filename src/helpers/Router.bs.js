// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Animal$WildCards from "../harberger-lib/Animal.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";

function useUrlState(param) {
  var url = ReasonReactRouter.useUrl(undefined, undefined);
  return React.useMemo((function () {
                var urlArray = url.hash.split("/");
                var exit = 0;
                var animalStr;
                var len = urlArray.length;
                if (len >= 5) {
                  exit = 1;
                } else {
                  switch (len) {
                    case 0 :
                        exit = 1;
                        break;
                    case 1 :
                        var match = urlArray[0];
                        switch (match) {
                          case "dao" :
                              return /* VotePage */2;
                          case "increase-iteration" :
                              return /* IncreaseVoteIteration */1;
                          default:
                            exit = 1;
                        }
                        break;
                    case 2 :
                        var match$1 = urlArray[0];
                        switch (match$1) {
                          case "details" :
                              var animalStr$1 = urlArray[1];
                              var optionAnimal = Animal$WildCards.getAnimal(animalStr$1);
                              return /* Home */Block.__(4, [/* DetailView */[optionAnimal]]);
                          case "leaderboards" :
                              var leaderboardType = urlArray[1];
                              switch (leaderboardType) {
                                case "days-held" :
                                    return /* Leaderboards */Block.__(3, [/* TotalDaysHeld */1]);
                                case "monthly-contribution" :
                                    return /* Leaderboards */Block.__(3, [/* MonthlyContribution */3]);
                                case "total-contribution" :
                                    return /* Leaderboards */Block.__(3, [/* TotalContribution */0]);
                                default:
                                  return /* Leaderboards */Block.__(3, [/* Unknown */2]);
                              }
                          case "org" :
                              var orgId = urlArray[1];
                              return /* Org */Block.__(1, [orgId.toLowerCase()]);
                          case "user" :
                              var address = urlArray[1];
                              return /* User */Block.__(0, [address.toLowerCase()]);
                          default:
                            exit = 1;
                        }
                        break;
                    case 3 :
                        var match$2 = urlArray[0];
                        if (match$2 === "explorer") {
                          var match$3 = urlArray[1];
                          if (match$3 === "details") {
                            var animalStr$2 = urlArray[2];
                            animalStr = animalStr$2;
                            exit = 2;
                          } else {
                            exit = 1;
                          }
                        } else {
                          exit = 1;
                        }
                        break;
                    case 4 :
                        var match$4 = urlArray[0];
                        if (match$4 === "explorer") {
                          var match$5 = urlArray[1];
                          if (match$5 === "details") {
                            var animalStr$3 = urlArray[2];
                            var match$6 = urlArray[3];
                            if (match$6 === "") {
                              animalStr = animalStr$3;
                              exit = 2;
                            } else {
                              exit = 1;
                            }
                          } else {
                            exit = 1;
                          }
                        } else {
                          exit = 1;
                        }
                        break;
                    
                  }
                }
                switch (exit) {
                  case 1 :
                      var match$7 = Belt_Option.mapWithDefault(Belt_Array.get(urlArray, 0), "", (function (a) {
                              return a;
                            }));
                      switch (match$7) {
                        case "explorer" :
                            return /* Explorer */Block.__(2, [/* NormalView */0]);
                        case "team" :
                            return /* Team */0;
                        default:
                          return /* Home */Block.__(4, [/* NormalView */0]);
                      }
                  case 2 :
                      var optionAnimal$1 = Animal$WildCards.getAnimal(animalStr);
                      return /* Explorer */Block.__(2, [/* DetailView */[optionAnimal$1]]);
                  
                }
              }), [url.hash]);
}

function useIsExplorer(param) {
  var urlState = useUrlState(undefined);
  return React.useMemo((function () {
                if (typeof urlState === "number" || urlState.tag !== /* Explorer */2) {
                  return false;
                } else {
                  return true;
                }
              }), [urlState]);
}

function isDetailsAnimalPage(animalPageState) {
  if (animalPageState) {
    return true;
  } else {
    return false;
  }
}

function useIsDetails(param) {
  var urlState = useUrlState(undefined);
  return React.useMemo((function () {
                if (typeof urlState === "number") {
                  return false;
                }
                switch (urlState.tag | 0) {
                  case /* Explorer */2 :
                  case /* Home */4 :
                      return isDetailsAnimalPage(urlState[0]);
                  default:
                    return false;
                }
              }), [urlState]);
}

function useIsHome(param) {
  var urlState = useUrlState(undefined);
  return React.useMemo((function () {
                if (typeof urlState === "number" || urlState.tag !== /* Home */4) {
                  return false;
                } else {
                  return true;
                }
              }), [urlState]);
}

function getAnimalFormAnimalPageState(animalPageState) {
  if (animalPageState) {
    return animalPageState[0];
  }
  
}

function useAnimalForDetails(param) {
  var urlState = useUrlState(undefined);
  return React.useMemo((function () {
                if (typeof urlState === "number") {
                  return ;
                }
                switch (urlState.tag | 0) {
                  case /* Explorer */2 :
                  case /* Home */4 :
                      return getAnimalFormAnimalPageState(urlState[0]);
                  default:
                    return ;
                }
              }), [urlState]);
}

export {
  useUrlState ,
  useIsExplorer ,
  isDetailsAnimalPage ,
  useIsDetails ,
  useIsHome ,
  getAnimalFormAnimalPageState ,
  useAnimalForDetails ,
  
}
/* react Not a pure module */
