// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as BnJs from "bn.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as RimbleUi from "rimble-ui";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Helper$WildCards from "../../harberger-lib/Helper.bs.js";
import * as QlHooks$WildCards from "../../harberger-lib/QlHooks.bs.js";
import * as Web3Utils$WildCards from "../../harberger-lib/Web3Utils.bs.js";
import * as RootProvider$WildCards from "../../harberger-lib/RootProvider.bs.js";
import * as UserProvider$WildCards from "../../harberger-lib/js/user-provider/UserProvider.bs.js";
import * as ApolloHooks$ReasonApolloHooks from "@wildcards/reason-apollo-hooks/src/ApolloHooks.bs.js";

var ppx_printed_query = "query   {\npatrons(first: 30, orderBy: totalContributed, orderDirection: desc, where: {id_not: \"0x6d47cf86f6a490c6410fc082fd1ad29cf61492d0\"})  {\nid  \npatronTokenCostScaledNumerator  \ntotalContributed  \nlastUpdated  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var value$2 = Js_dict.get(value$1, "patrons");
  return {
          patrons: value$2 !== undefined ? Js_option.getExn(Js_json.decodeArray(Caml_option.valFromOption(value$2))).map((function (value) {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var value$2 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (value$2 !== undefined) {
                      var value$3 = Caml_option.valFromOption(value$2);
                      var value$4 = Js_json.decodeString(value$3);
                      tmp = value$4 !== undefined ? value$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Field id on type Patron is missing");
                    }
                    var value$5 = Js_dict.get(value$1, "patronTokenCostScaledNumerator");
                    var value$6 = Js_dict.get(value$1, "totalContributed");
                    var value$7 = Js_dict.get(value$1, "lastUpdated");
                    return {
                            id: tmp,
                            patronTokenCostScaledNumerator: value$5 !== undefined ? QlHooks$WildCards.decodeBN(Caml_option.valFromOption(value$5)) : Js_exn.raiseError("graphql_ppx: Field patronTokenCostScaledNumerator on type Patron is missing"),
                            totalContributed: value$6 !== undefined ? QlHooks$WildCards.decodeBN(Caml_option.valFromOption(value$6)) : Js_exn.raiseError("graphql_ppx: Field totalContributed on type Patron is missing"),
                            lastUpdated: value$7 !== undefined ? QlHooks$WildCards.decodeBN(Caml_option.valFromOption(value$7)) : Js_exn.raiseError("graphql_ppx: Field lastUpdated on type Patron is missing")
                          };
                  })) : Js_exn.raiseError("graphql_ppx: Field patrons on type query_root is missing")
        };
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeVariables(param) {
  return null;
}

function definition_002(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var LoadMostContributed = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function useLoadMostContributed(param) {
  return ApolloHooks$ReasonApolloHooks.useSubscription(undefined, undefined, undefined, definition);
}

function useLoadMostContributedData(param) {
  var match = useLoadMostContributed(undefined);
  var simple = match[0];
  var currentTimestamp = QlHooks$WildCards.useCurrentTime(undefined);
  if (typeof simple === "number") {
    return ;
  }
  if (simple.tag) {
    return ;
  }
  var dailyContributions = simple[0].patrons.map((function (patron) {
          var timeElapsed = new BnJs.default(currentTimestamp).sub(patron.lastUpdated);
          var amountContributedSinceLastUpdate = patron.patronTokenCostScaledNumerator.mul(timeElapsed).div(new BnJs.default("31536000000000000000"));
          var totalContributedWei = patron.totalContributed.add(amountContributedSinceLastUpdate);
          return /* tuple */[
                  patron.id,
                  totalContributedWei
                ];
        }));
  $$Array.sort((function (param, param$1) {
          return param$1[1].cmp(param[1]);
        }), dailyContributions);
  return dailyContributions;
}

var goldTrophyImg = "/img/icons/gold-trophy.png";

var silverTrophyImg = "/img/icons/silver-trophy.png";

var bronzeTrophyImg = "/img/icons/bronze-trophy.png";

var leaderboardTable = Curry._1(Css.style, /* :: */[
      Css.width(/* `percent */[
            -119887163,
            100
          ]),
      /* :: */[
        Css.tableLayout(/* fixed */10615156),
        /* :: */[
          Css.overflowWrap(/* breakWord */1059921449),
          /* [] */0
        ]
      ]
    ]);

var leaderboardHeader = Curry._1(Css.style, /* :: */[
      Css.backgroundColor(/* `hex */[
            5194459,
            "73c7d7ff"
          ]),
      /* [] */0
    ]);

var streakTextLeaderboard = Curry._1(Css.style, /* :: */[
      Css.position(Css.absolute),
      /* :: */[
        Css.zIndex(100),
        /* :: */[
          Css.bottom(/* `percent */[
                -119887163,
                -10
              ]),
          /* :: */[
            Css.right(/* `percent */[
                  -119887163,
                  50
                ]),
            /* :: */[
              Css.transform(Css.translateX(/* `px */[
                        25096,
                        -5
                      ])),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var flameImgLeaderboard = Curry._1(Css.style, /* :: */[
      Css.width(/* `percent */[
            -119887163,
            100
          ]),
      /* :: */[
        Css.maxWidth(Css.px(50)),
        /* [] */0
      ]
    ]);

var rankText = Curry._1(Css.style, /* :: */[
      Css.position(Css.absolute),
      /* :: */[
        Css.zIndex(100),
        /* :: */[
          Css.bottom(/* `percent */[
                -119887163,
                -10
              ]),
          /* :: */[
            Css.right(/* `percent */[
                  -119887163,
                  50
                ]),
            /* :: */[
              Css.transform(Css.translate(/* `px */[
                        25096,
                        -4
                      ], /* `px */[
                        25096,
                        -15
                      ])),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var trophyImg = Curry._1(Css.style, /* :: */[
      Css.width(/* `percent */[
            -119887163,
            100
          ]),
      /* :: */[
        Css.width(Css.px(50)),
        /* :: */[
          Css.height(Css.px(50)),
          /* [] */0
        ]
      ]
    ]);

var centerFlame = Curry._1(Css.style, /* :: */[
      Css.display(Css.block),
      /* :: */[
        Css.margin(Css.auto),
        /* :: */[
          Css.width(/* `px */[
                25096,
                70
              ]),
          /* :: */[
            Css.position(Css.relative),
            /* [] */0
          ]
        ]
      ]
    ]);

var rankMetric = Curry._1(Css.style, /* :: */[
      Css.fontSize(/* `px */[
            25096,
            16
          ]),
      /* [] */0
    ]);

function rankingColor(index) {
  return Curry._1(Css.style, /* :: */[
              Css.backgroundColor(/* `hex */[
                    5194459,
                    index % 2 === 1 ? "b5b5bd22" : "ffffffff"
                  ]),
              /* [] */0
            ]);
}

function TotalContribution$ContributorsRow(Props) {
  var contributor = Props.contributor;
  var amount = Props.amount;
  var index = Props.index;
  Curry._2(UserProvider$WildCards.useUserInfoContext(undefined).update, contributor, false);
  var optThreeBoxData = UserProvider$WildCards.use3BoxUserData(contributor);
  var optUserName = Belt_Option.flatMap(Belt_Option.flatMap(optThreeBoxData, (function (threeBoxData) {
              return threeBoxData.profile;
            })), (function (threeBoxData) {
          return threeBoxData.name;
        }));
  var clearAndPush = RootProvider$WildCards.useClearNonUrlStateAndPushRoute(undefined);
  return React.createElement("tr", {
              key: contributor,
              className: rankingColor(index)
            }, React.createElement("td", undefined, React.createElement("span", {
                      className: centerFlame
                    }, index === 0 ? React.createElement("img", {
                            className: trophyImg,
                            src: goldTrophyImg
                          }) : (
                        index === 1 ? React.createElement("img", {
                                className: trophyImg,
                                src: silverTrophyImg
                              }) : (
                            index === 2 ? React.createElement("img", {
                                    className: trophyImg,
                                    src: bronzeTrophyImg
                                  }) : React.createElement("div", {
                                    className: trophyImg
                                  })
                          )
                      ), React.createElement("p", {
                          className: rankText
                        }, React.createElement("strong", undefined, "#", String(index + 1 | 0))))), React.createElement("td", undefined, React.createElement("a", {
                      onClick: (function (e) {
                          e.preventDefault();
                          return Curry._1(clearAndPush, "/#user/" + (String(contributor) + ""));
                        })
                    }, optUserName !== undefined ? React.createElement("span", undefined, optUserName) : React.createElement("span", undefined, Helper$WildCards.elipsify(contributor, 20)))), React.createElement("td", {
                  className: rankMetric
                }, amount + " ETH"));
}

var ContributorsRow = {
  make: TotalContribution$ContributorsRow
};

function TotalContribution$MostContributed(Props) {
  var highestContributors = Props.highestContributors;
  return $$Array.mapi((function (index, param) {
                return React.createElement(TotalContribution$ContributorsRow, {
                            contributor: param[0],
                            amount: Web3Utils$WildCards.fromWeiBNToEthPrecision(param[1], 4),
                            index: index
                          });
              }), highestContributors);
}

var MostContributed = {
  make: TotalContribution$MostContributed
};

function TotalContribution(Props) {
  var numberOfLeaders = Props.numberOfLeaders;
  var highestContributorsOpt = useLoadMostContributedData(undefined);
  var tmp;
  if (highestContributorsOpt !== undefined) {
    var highestContributors = Belt_Array.slice(highestContributorsOpt, 0, numberOfLeaders);
    tmp = React.createElement(TotalContribution$MostContributed, {
          highestContributors: highestContributors
        });
  } else {
    tmp = null;
  }
  return React.createElement("div", undefined, React.createElement(RimbleUi.Heading, {
                  children: "Wildcards Total Contribution Leaderboard"
                }), React.createElement("br", undefined), React.createElement(RimbleUi.Table, {
                  children: null,
                  className: leaderboardTable
                }, React.createElement("thead", {
                      className: leaderboardHeader
                    }, React.createElement("tr", undefined, React.createElement("th", undefined, "Rank"), React.createElement("th", undefined, "Guardian"), React.createElement("th", undefined, "Total Contribution"))), React.createElement("tbody", undefined, tmp)));
}

var flameImg = "/img/streak-flame.png";

var make$1 = TotalContribution;

export {
  LoadMostContributed ,
  useLoadMostContributed ,
  useLoadMostContributedData ,
  flameImg ,
  goldTrophyImg ,
  silverTrophyImg ,
  bronzeTrophyImg ,
  leaderboardTable ,
  leaderboardHeader ,
  streakTextLeaderboard ,
  flameImgLeaderboard ,
  rankText ,
  trophyImg ,
  centerFlame ,
  rankMetric ,
  rankingColor ,
  ContributorsRow ,
  MostContributed ,
  make$1 as make,
  
}
/* leaderboardTable Not a pure module */
