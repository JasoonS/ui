// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.bs.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import BnJs from "bn.js";
import * as React from "react";
import * as RimbleUi from "rimble-ui";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Helper$WildCards from "../../harberger-lib/Helper.bs.js";
import * as RootProvider$WildCards from "../../harberger-lib/RootProvider.bs.js";
import * as UserProvider$WildCards from "../../harberger-lib/js/user-provider/UserProvider.bs.js";
import * as GqlConverters$WildCards from "../../gql/GqlConverters.bs.js";

var Raw = {};

function parse(value) {
  var value$1 = value.patrons;
  return {
          patrons: value$1.map(function (value) {
                var value$1 = value.tokens;
                return {
                        id: value.id,
                        totalTimeHeld: GqlConverters$WildCards.$$BigInt.parse(value.totalTimeHeld),
                        tokens: value$1.map(function (value) {
                              return {
                                      id: value.id
                                    };
                            }),
                        lastUpdated: GqlConverters$WildCards.$$BigInt.parse(value.lastUpdated)
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.patrons;
  var patrons = value$1.map(function (value) {
        var value$1 = value.lastUpdated;
        var value$2 = GqlConverters$WildCards.$$BigInt.serialize(value$1);
        var value$3 = value.tokens;
        var tokens = value$3.map(function (value) {
              var value$1 = value.id;
              return {
                      id: value$1
                    };
            });
        var value$4 = value.totalTimeHeld;
        var value$5 = GqlConverters$WildCards.$$BigInt.serialize(value$4);
        var value$6 = value.id;
        return {
                id: value$6,
                totalTimeHeld: value$5,
                tokens: tokens,
                lastUpdated: value$2
              };
      });
  return {
          patrons: patrons
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var LoadMostDaysHeld = {
  Raw: Raw,
  query: "query   {\npatrons(first: 20, orderBy: totalTimeHeld, orderDirection: desc, where: {id_not: \"NO_OWNER\"})  {\nid  \ntotalTimeHeld  \ntokens  {\nid  \n}\n\nlastUpdated  \n}\n\n}\n",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

function useLoadMostDaysHeld(param) {
  
}

function useLoadMostDaysHeldData(param) {
  
}

var goldTrophyImg = "/img/icons/gold-trophy.png";

var silverTrophyImg = "/img/icons/silver-trophy.png";

var bronzeTrophyImg = "/img/icons/bronze-trophy.png";

var leaderboardTable = Curry._1(Css.style, {
      hd: Css.width({
            NAME: "percent",
            VAL: 100
          }),
      tl: {
        hd: Css.tableLayout("fixed"),
        tl: {
          hd: Css.overflowWrap("breakWord"),
          tl: /* [] */0
        }
      }
    });

var leaderboardHeader = Curry._1(Css.style, {
      hd: Css.backgroundColor({
            NAME: "hex",
            VAL: "73c7d7ff"
          }),
      tl: /* [] */0
    });

var streakTextLeaderboard = Curry._1(Css.style, {
      hd: Css.position(Css.absolute),
      tl: {
        hd: Css.zIndex(100),
        tl: {
          hd: Css.bottom({
                NAME: "percent",
                VAL: -10
              }),
          tl: {
            hd: Css.right({
                  NAME: "percent",
                  VAL: 50
                }),
            tl: {
              hd: Css.transform(Css.translateX({
                        NAME: "px",
                        VAL: -5
                      })),
              tl: /* [] */0
            }
          }
        }
      }
    });

var flameImgLeaderboard = Curry._1(Css.style, {
      hd: Css.width({
            NAME: "percent",
            VAL: 100
          }),
      tl: {
        hd: Css.maxWidth(Css.px(50)),
        tl: /* [] */0
      }
    });

var rankText = Curry._1(Css.style, {
      hd: Css.position(Css.absolute),
      tl: {
        hd: Css.zIndex(100),
        tl: {
          hd: Css.bottom({
                NAME: "percent",
                VAL: -10
              }),
          tl: {
            hd: Css.right({
                  NAME: "percent",
                  VAL: 50
                }),
            tl: {
              hd: Css.transform(Css.translate({
                        NAME: "px",
                        VAL: -4
                      }, {
                        NAME: "px",
                        VAL: -15
                      })),
              tl: /* [] */0
            }
          }
        }
      }
    });

var trophyImg = Curry._1(Css.style, {
      hd: Css.width({
            NAME: "percent",
            VAL: 100
          }),
      tl: {
        hd: Css.width(Css.px(50)),
        tl: {
          hd: Css.height(Css.px(50)),
          tl: /* [] */0
        }
      }
    });

var centerFlame = Curry._1(Css.style, {
      hd: Css.display(Css.block),
      tl: {
        hd: Css.margin(Css.auto),
        tl: {
          hd: Css.width({
                NAME: "px",
                VAL: 70
              }),
          tl: {
            hd: Css.position(Css.relative),
            tl: /* [] */0
          }
        }
      }
    });

var rankMetric = Curry._1(Css.style, {
      hd: Css.fontSize({
            NAME: "px",
            VAL: 16
          }),
      tl: /* [] */0
    });

function rankingColor(index) {
  return Curry._1(Css.style, {
              hd: Css.backgroundColor({
                    NAME: "hex",
                    VAL: index % 2 === 1 ? "b5b5bd22" : "ffffffff"
                  }),
              tl: /* [] */0
            });
}

function TotalDaysHeld$ContributorsRow(Props) {
  var contributor = Props.contributor;
  var amount = Props.amount;
  var index = Props.index;
  Curry._2(UserProvider$WildCards.useUserInfoContext(undefined).update, contributor, false);
  var optThreeBoxData = UserProvider$WildCards.use3BoxUserData(contributor);
  var optUserName = Belt_Option.flatMap(Belt_Option.flatMap(optThreeBoxData, (function (threeBoxData) {
              return threeBoxData.profile;
            })), (function (threeBoxData) {
          return threeBoxData.name;
        }));
  var clearAndPush = RootProvider$WildCards.useClearNonUrlStateAndPushRoute(undefined);
  return React.createElement("tr", {
              key: contributor,
              className: rankingColor(index)
            }, React.createElement("td", undefined, React.createElement("span", {
                      className: centerFlame
                    }, index === 0 ? React.createElement("img", {
                            className: trophyImg,
                            src: goldTrophyImg
                          }) : (
                        index === 1 ? React.createElement("img", {
                                className: trophyImg,
                                src: silverTrophyImg
                              }) : (
                            index === 2 ? React.createElement("img", {
                                    className: trophyImg,
                                    src: bronzeTrophyImg
                                  }) : React.createElement("div", {
                                    className: trophyImg
                                  })
                          )
                      ), React.createElement("p", {
                          className: rankText
                        }, React.createElement("strong", undefined, "#", String(index + 1 | 0))))), React.createElement("td", undefined, React.createElement("a", {
                      onClick: (function (e) {
                          e.preventDefault();
                          return Curry._1(clearAndPush, "/#user/" + contributor);
                        })
                    }, optUserName !== undefined ? React.createElement("span", undefined, optUserName) : React.createElement("span", undefined, Helper$WildCards.elipsify(contributor, 20)))), React.createElement("td", {
                  className: rankMetric
                }, amount + " Days"));
}

var ContributorsRow = {
  make: TotalDaysHeld$ContributorsRow
};

function TotalDaysHeld$MostDaysHeld(Props) {
  var mostDaysHeld = Props.mostDaysHeld;
  return $$Array.mapi((function (index, param) {
                return React.createElement(TotalDaysHeld$ContributorsRow, {
                            contributor: param[0],
                            amount: param[1].div(new BnJs("86400")).toString(),
                            index: index
                          });
              }), mostDaysHeld);
}

var MostDaysHeld = {
  make: TotalDaysHeld$MostDaysHeld
};

function TotalDaysHeld(Props) {
  var tmp;
  tmp = null;
  return React.createElement("div", undefined, React.createElement(RimbleUi.Heading, {
                  children: "Wildcards Accumulative Days Held Leaderboard"
                }), React.createElement("br", undefined), React.createElement(RimbleUi.Table, {
                  children: null,
                  className: leaderboardTable
                }, React.createElement("thead", {
                      className: leaderboardHeader
                    }, React.createElement("tr", undefined, React.createElement("th", undefined, "Rank"), React.createElement("th", undefined, "Guardian"), React.createElement("th", undefined, "Accumulative Days Held"))), React.createElement("tbody", undefined, tmp)));
}

var flameImg = "/img/streak-flame.png";

var make = TotalDaysHeld;

export {
  LoadMostDaysHeld ,
  useLoadMostDaysHeld ,
  useLoadMostDaysHeldData ,
  flameImg ,
  goldTrophyImg ,
  silverTrophyImg ,
  bronzeTrophyImg ,
  leaderboardTable ,
  leaderboardHeader ,
  streakTextLeaderboard ,
  flameImgLeaderboard ,
  rankText ,
  trophyImg ,
  centerFlame ,
  rankMetric ,
  rankingColor ,
  ContributorsRow ,
  MostDaysHeld ,
  make ,
  
}
/* leaderboardTable Not a pure module */
