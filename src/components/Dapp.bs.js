// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as BnJs from "bn.js";
import * as React from "react";
import * as Moment from "moment";
import * as RimbleUi from "rimble-ui";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Float from "bs-platform/lib/es6/belt_Float.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as ReactTabs from "react-tabs";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as BrowserLogger from "bs-log/src/BrowserLogger.bs.js";
import * as Buy$WildCards from "../harberger-lib/components/Buy.bs.js";
import * as Eth$WildCards from "../harberger-lib/Eth.bs.js";
import * as Info$WildCards from "../harberger-lib/components/Info.bs.js";
import * as Login$WildCards from "../harberger-lib/Login.bs.js";
import * as ReactTranslate from "react-translate";
import * as Animal$WildCards from "../harberger-lib/Animal.bs.js";
import * as Router$WildCards from "../helpers/Router.bs.js";
import * as Styles$WildCards from "../Styles.bs.js";
import * as Globals$WildCards from "../harberger-lib/Globals.bs.js";
import * as QlHooks$WildCards from "../harberger-lib/QlHooks.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as TokenId$WildCards from "../harberger-lib/TokenId.bs.js";
import * as Validate$WildCards from "./Validate.bs.js";
import * as CountDown$WildCards from "../harberger-lib/CountDown.bs.js";
import * as InputHelp$WildCards from "../harberger-lib/InputHelp.bs.js";
import * as Web3Utils$WildCards from "../harberger-lib/Web3Utils.bs.js";
import * as Accounting$WildCards from "../harberger-lib/Accounting.bs.js";
import * as TotalRaised$WildCards from "./components/TotalRaised.bs.js";
import * as UpdatePrice$WildCards from "../harberger-lib/components/UpdatePrice.bs.js";
import * as PriceDisplay$WildCards from "../harberger-lib/PriceDisplay.bs.js";
import * as RootProvider$WildCards from "../harberger-lib/RootProvider.bs.js";
import * as UserProvider$WildCards from "../harberger-lib/js/user-provider/UserProvider.bs.js";
import * as ActionButtons$WildCards from "./ActionButtons.bs.js";
import * as UpdateDeposit$WildCards from "../harberger-lib/components/UpdateDeposit.bs.js";
import * as ReactTranslate$WildCards from "../helpers/providers/ReactTranslate.bs.js";
import * as ReactCarousel from "@wildcards/react-carousel";
import * as UsdPriceProvider$WildCards from "../harberger-lib/components/UsdPriceProvider.bs.js";
import * as LazyThreeBoxUpdate$WildCards from "./LazyThreeBoxUpdate.bs.js";
import * as ShareSocialMedia from "./components/shareSocialMedia";

var flameImg = "/img/streak-flame.png";

var make = ShareSocialMedia.default;

var ShareSocial = {
  make: make
};

function Dapp$EditButton(Props) {
  var animal = Props.animal;
  var clearAndPush = RootProvider$WildCards.useClearNonUrlStateAndPushRoute(undefined);
  var isExplorer = Router$WildCards.useIsExplorer(undefined);
  return React.createElement(RimbleUi.Button, {
              children: "Edit",
              onClick: (function ($$event) {
                  $$event.preventDefault();
                  return Curry._1(clearAndPush, "#" + (InputHelp$WildCards.getPagePrefix(isExplorer) + ("details/" + TokenId$WildCards.toString(animal))));
                })
            });
}

var EditButton = {
  make: Dapp$EditButton
};

function Dapp$Streak(Props) {
  var chain = Props.chain;
  var animal = Props.animal;
  var animalName = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardName(animal), "Loading");
  var daysHeld = QlHooks$WildCards.useDaysHeld(chain, animal);
  if (daysHeld === undefined) {
    return null;
  }
  var numDaysStr = daysHeld[0].toFixed();
  return React.createElement(RimbleUi.Tooltip, {
              message: "" + (String(animalName) + (" has been held for " + (String(numDaysStr) + " days by the same owner."))),
              className: Curry._1(Css.style, /* :: */[
                    Css.width(/* `em */[
                          22632,
                          20
                        ]),
                    /* [] */0
                  ]),
              children: React.createElement("div", {
                    className: Styles$WildCards.positionRelative
                  }, React.createElement("img", {
                        className: Styles$WildCards.flameImg,
                        src: flameImg
                      }), React.createElement("p", {
                        className: Styles$WildCards.streakText
                      }, React.createElement("strong", undefined, numDaysStr)))
            });
}

var Streak = {
  make: Dapp$Streak
};

function Dapp$DisplayAfterDate(Props) {
  var endDateMoment = Props.endDateMoment;
  var beforeComponent = Props.beforeComponent;
  var afterComponent = Props.afterComponent;
  var isBeforeDate = React.useCallback((function (param) {
          return endDateMoment.diff(Moment(), "seconds") > 0;
        }), [endDateMoment]);
  var match = React.useState((function () {
          return Curry._1(isBeforeDate, undefined);
        }));
  var setIsBeforeDate = match[1];
  React.useEffect((function () {
          var timeout = setTimeout((function (param) {
                  return Curry._1(setIsBeforeDate, (function (param) {
                                return Curry._1(isBeforeDate, undefined);
                              }));
                }), 1500);
          return (function (param) {
                    clearTimeout(timeout);
                    
                  });
        }), /* tuple */[
        setIsBeforeDate,
        isBeforeDate
      ]);
  if (match[0]) {
    return beforeComponent;
  } else {
    return afterComponent;
  }
}

var DisplayAfterDate = {
  make: Dapp$DisplayAfterDate
};

function Dapp$AuctionDisplay(Props) {
  var chain = Props.chain;
  var launchTime = Props.launchTime;
  var animal = Props.animal;
  var currentPriceWei = Animal$WildCards.useAuctionPriceWei(chain, animal, launchTime);
  var optCurrentUsdEthPrice = UsdPriceProvider$WildCards.useUsdPrice(undefined);
  var tmp;
  if (chain !== 1) {
    var match = PriceDisplay$WildCards.priceWeiToTuple(Belt_Option.getWithDefault(currentPriceWei, new BnJs.default("0")), optCurrentUsdEthPrice);
    tmp = React.createElement(PriceDisplay$WildCards.PurePriceDisplay.make, {
          priceEth: match[0],
          optPriceUsd: match[1]
        });
  } else {
    tmp = React.createElement("p", {
          className: Styles$WildCards.noMarginTop + (" " + Styles$WildCards.noMarginBottom)
        }, Belt_Option.mapWithDefault(currentPriceWei, "Loading", (function (price) {
                return React.createElement(React.Fragment, undefined, Web3Utils$WildCards.fromWeiBNToEthPrecision(price, 4) + " USD", React.createElement("small", undefined, " (DAI)"));
              })));
  }
  return React.createElement(React.Fragment, undefined, React.createElement("h3", undefined, "Auction"), tmp, React.createElement(ActionButtons$WildCards.Auction.make, {
                  animal: animal
                }));
}

var AuctionDisplay = {
  make: Dapp$AuctionDisplay
};

function Dapp$AuctionDetails(Props) {
  var chain = Props.chain;
  var animal = Props.animal;
  var launchTimeOpt = QlHooks$WildCards.useLaunchTimeBN(chain, animal);
  var foreclosureTimeOpt = QlHooks$WildCards.useForeclosureTimeBn(chain, TokenId$WildCards.toString(animal));
  if (launchTimeOpt === undefined) {
    if (foreclosureTimeOpt !== undefined) {
      return React.createElement(Dapp$AuctionDisplay, {
                  chain: chain,
                  launchTime: Caml_option.valFromOption(foreclosureTimeOpt),
                  animal: animal
                });
    } else {
      return React.createElement("p", undefined, "Loading");
    }
  }
  var launchTime = Caml_option.valFromOption(launchTimeOpt);
  if (foreclosureTimeOpt === undefined) {
    return React.createElement(Dapp$AuctionDisplay, {
                chain: chain,
                launchTime: launchTime,
                animal: animal
              });
  }
  var foreclosurTime = Caml_option.valFromOption(foreclosureTimeOpt);
  if (foreclosurTime.lt(launchTime)) {
    return React.createElement(Dapp$AuctionDisplay, {
                chain: chain,
                launchTime: launchTime,
                animal: animal
              });
  } else {
    return React.createElement(Dapp$AuctionDisplay, {
                chain: chain,
                launchTime: foreclosurTime,
                animal: animal
              });
  }
}

var AuctionDetails = {
  make: Dapp$AuctionDetails
};

function Dapp$BasicAnimalDisplay(Props) {
  var chain = Props.chain;
  var animal = Props.animal;
  var owned = QlHooks$WildCards.useIsAnimalOwened(chain, animal);
  var currentPatron = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.usePatron(chain, animal), "Loading");
  var displayName = UserProvider$WildCards.useDisplayName(currentPatron);
  var displayNameStr = UserProvider$WildCards.displayNameToString(displayName);
  var clearAndPush = RootProvider$WildCards.useClearNonUrlStateAndPushRoute(undefined);
  var nonUrlRouting = RootProvider$WildCards.useNonUrlState(undefined);
  var isOnAuction = Animal$WildCards.useIsOnAuction(chain, animal);
  if (isOnAuction) {
    return React.createElement(Dapp$AuctionDetails, {
                chain: chain,
                animal: animal
              });
  }
  var tmp;
  var exit = 0;
  if (typeof nonUrlRouting === "number") {
    if (nonUrlRouting === /* NoExtraState */2) {
      exit = 1;
    } else {
      tmp = null;
    }
  } else if (nonUrlRouting.tag) {
    tmp = null;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    tmp = owned ? React.createElement(Dapp$EditButton, {
            animal: animal
          }) : React.createElement(ActionButtons$WildCards.Buy.make, {
            chain: chain,
            animal: animal
          });
  }
  return React.createElement(React.Fragment, undefined, React.createElement(PriceDisplay$WildCards.make, {
                  chain: chain,
                  animal: animal
                }), React.createElement("a", {
                  onClick: (function (e) {
                      e.preventDefault();
                      return Curry._1(clearAndPush, "/#user/" + (String(currentPatron) + ""));
                    })
                }, Globals$WildCards.restr(displayNameStr)), React.createElement("br", undefined), tmp);
}

var BasicAnimalDisplay = {
  make: Dapp$BasicAnimalDisplay
};

function Dapp$AnimalOnLandingPage(Props) {
  var animal = Props.animal;
  var scalarOpt = Props.scalar;
  var chain = Props.chain;
  var enlargementOpt = Props.enlargement;
  var optionEndDateMoment = Props.optionEndDateMoment;
  var isGqlLoaded = Props.isGqlLoaded;
  var scalar = scalarOpt !== undefined ? scalarOpt : 1;
  var enlargement = enlargementOpt !== undefined ? enlargementOpt : 1;
  var name = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardName(animal), "Loading");
  var isExplorer = Router$WildCards.useIsExplorer(undefined);
  var orgBadge = Animal$WildCards.useGetOrgBadgeImage(animal);
  var orgId = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardOrgId(animal), "");
  var currentPriceWei = QlHooks$WildCards.usePrice(chain, animal);
  var clearAndPush = RootProvider$WildCards.useClearNonUrlStateAndPushRoute(undefined);
  var image = Animal$WildCards.useAvatar(animal);
  var normalImage = function (param) {
    return React.createElement("img", {
                className: Styles$WildCards.headerImg(enlargement, scalar),
                src: image
              });
  };
  var componentWithoutImg = function (img, hideBadges) {
    var tmp;
    if (hideBadges) {
      tmp = null;
    } else {
      var tmp$1;
      tmp$1 = isGqlLoaded && !(optionEndDateMoment !== undefined || typeof currentPriceWei === "number" || !currentPriceWei.tag) ? React.createElement("div", {
              className: Styles$WildCards.overlayFlameImg
            }, React.createElement(Dapp$Streak, {
                  chain: chain,
                  animal: animal
                })) : null;
      tmp = React.createElement(React.Fragment, {
            children: null
          }, tmp$1, React.createElement("div", {
                className: Styles$WildCards.overlayBadgeImg,
                onClick: (function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    return Curry._1(clearAndPush, "#org/" + orgId);
                  })
              }, React.createElement("img", {
                    className: Styles$WildCards.flameImg,
                    src: orgBadge
                  })));
    }
    return React.createElement(React.Fragment, {
                children: null
              }, Curry._1(img, undefined), tmp);
  };
  return React.createElement(RimbleUi.Box, {
              children: null,
              className: Styles$WildCards.centerText
            }, React.createElement("div", {
                  className: Styles$WildCards.positionRelative
                }, React.createElement("a", {
                      className: Styles$WildCards.clickableLink,
                      onClick: (function ($$event) {
                          $$event.preventDefault();
                          return Curry._1(clearAndPush, "#" + (InputHelp$WildCards.getPagePrefix(isExplorer) + ("details/" + TokenId$WildCards.toString(animal))));
                        })
                    }, componentWithoutImg(normalImage, false), React.createElement("div", undefined, React.createElement("h2", undefined, name)))), optionEndDateMoment !== undefined ? React.createElement("div", undefined, React.createElement("h3", {
                        className: Styles$WildCards.colorGreen
                      }, "COMING IN"), React.createElement(CountDown$WildCards.make, {
                        endDateMoment: Caml_option.valFromOption(optionEndDateMoment),
                        displayUnits: false
                      })) : (
                isGqlLoaded ? React.createElement("div", undefined, React.createElement(Dapp$BasicAnimalDisplay, {
                            chain: chain,
                            animal: animal
                          })) : null
              ));
}

var AnimalOnLandingPage = {
  make: Dapp$AnimalOnLandingPage
};

function Dapp$CarouselAnimal(Props) {
  var animal = Props.animal;
  var scalar = Props.scalar;
  var enlargementOpt = Props.enlargement;
  var isGqlLoadedOpt = Props.isGqlLoaded;
  var chainOpt = Props.chain;
  var enlargement = enlargementOpt !== undefined ? enlargementOpt : 1;
  var isGqlLoaded = isGqlLoadedOpt !== undefined ? isGqlLoadedOpt : true;
  var chain = chainOpt !== undefined ? chainOpt : /* MainnetQuery */2;
  var isLaunched = Animal$WildCards.isLaunched(chain, animal);
  var makeAnimalOnLandingPage = function (optionEndDateMoment) {
    return React.createElement(Dapp$AnimalOnLandingPage, {
                animal: animal,
                scalar: scalar,
                chain: chain,
                enlargement: enlargement,
                optionEndDateMoment: optionEndDateMoment,
                isGqlLoaded: isGqlLoaded
              });
  };
  if (typeof isLaunched === "number") {
    return makeAnimalOnLandingPage(undefined);
  }
  var endDateMoment = isLaunched[0];
  return React.createElement(Dapp$DisplayAfterDate, {
              endDateMoment: endDateMoment,
              beforeComponent: makeAnimalOnLandingPage(Caml_option.some(endDateMoment)),
              afterComponent: makeAnimalOnLandingPage(undefined)
            });
}

var CarouselAnimal = {
  make: Dapp$CarouselAnimal
};

function Dapp$AnimalCarousel(Props) {
  var isGqlLoaded = Props.isGqlLoaded;
  var match = React.useState((function () {
          return 17;
        }));
  var setCarouselIndex = match[1];
  var carouselIndex = match[0];
  var homePageAnimals = QlHooks$WildCards.useHomePageAnimalArray(undefined);
  var numItems = homePageAnimals.length;
  return React.createElement(RimbleUi.Box, {
              children: React.createElement(ReactCarousel.default, {
                    children: Belt_Array.mapWithIndex(homePageAnimals, (function (index, animalInfo) {
                            var match = index === Caml_int32.mod_(carouselIndex, numItems) ? /* tuple */[
                                1,
                                1.0
                              ] : (
                                index === Caml_int32.mod_(carouselIndex - 1 | 0, numItems) || index === Caml_int32.mod_(carouselIndex + 1 | 0, numItems) ? /* tuple */[
                                    0.8,
                                    0.8
                                  ] : (
                                    index === Caml_int32.mod_(carouselIndex - 2 | 0, numItems) || index === Caml_int32.mod_(carouselIndex + 2 | 0, numItems) ? /* tuple */[
                                        0.1,
                                        0.7
                                      ] : /* tuple */[
                                        0,
                                        0.6
                                      ]
                                  )
                              );
                            return React.createElement("div", {
                                        key: TokenId$WildCards.toString(animalInfo.id),
                                        className: Styles$WildCards.fadeOut(match[0])
                                      }, React.createElement(Dapp$CarouselAnimal, {
                                            animal: animalInfo.id,
                                            scalar: match[1],
                                            enlargement: 1.5,
                                            isGqlLoaded: isGqlLoaded
                                          }));
                          })),
                    slidesPerPage: 5,
                    centered: true,
                    value: carouselIndex,
                    animationSpeed: 1000,
                    className: Styles$WildCards.carousel,
                    onChange: (function (test) {
                        return Curry._1(setCarouselIndex, (function (param) {
                                      return test;
                                    }));
                      }),
                    infinite: true,
                    autoPlay: 5000,
                    arrowLeft: React.createElement("span", {
                          className: Styles$WildCards.carouselArrow(undefined, true),
                          onClick: (function ($$event) {
                              $$event.preventDefault();
                              Curry._1(setCarouselIndex, (function (param) {
                                      return carouselIndex - 1 | 0;
                                    }));
                              $$event.stopPropagation();
                              
                            })
                        }, "◄"),
                    arrowRight: React.createElement("span", {
                          className: Styles$WildCards.carouselArrow(undefined, false),
                          onClick: (function ($$event) {
                              $$event.preventDefault();
                              Curry._1(setCarouselIndex, (function (param) {
                                      return carouselIndex + 1 | 0;
                                    }));
                              $$event.stopPropagation();
                              
                            })
                        }, "►"),
                    arrows: true
                  }),
              className: Styles$WildCards.positionRelative
            });
}

var AnimalCarousel = {
  make: Dapp$AnimalCarousel
};

function Dapp$AnimalActionsOnDetailsPage(Props) {
  var chain = Props.chain;
  var animal = Props.animal;
  var owned = QlHooks$WildCards.useIsAnimalOwened(chain, animal);
  var currentPatron = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.usePatron(chain, animal), "Loading");
  var displayName = UserProvider$WildCards.useDisplayName(currentPatron);
  var displayNameStr = UserProvider$WildCards.displayNameToString(displayName);
  var clearAndPush = RootProvider$WildCards.useClearNonUrlStateAndPushRoute(undefined);
  var nonUrlRouting = RootProvider$WildCards.useNonUrlState(undefined);
  var isOnAuction = Animal$WildCards.useIsOnAuction(chain, animal);
  var price = function (param) {
    if (isOnAuction) {
      return React.createElement(Dapp$AuctionDetails, {
                  chain: chain,
                  animal: animal
                });
    }
    var tmp;
    var exit = 0;
    if (typeof nonUrlRouting === "number") {
      if (nonUrlRouting === /* NoExtraState */2) {
        exit = 1;
      } else {
        tmp = null;
      }
    } else if (nonUrlRouting.tag) {
      tmp = null;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      tmp = React.createElement(ActionButtons$WildCards.Buy.make, {
            chain: chain,
            animal: animal
          });
    }
    return React.createElement(React.Fragment, {
                children: null
              }, React.createElement("a", {
                    onClick: (function (e) {
                        e.preventDefault();
                        return Curry._1(clearAndPush, "/#user/" + (String(currentPatron) + ""));
                      })
                  }, Globals$WildCards.restr(displayNameStr)), React.createElement(PriceDisplay$WildCards.make, {
                    chain: chain,
                    animal: animal
                  }), tmp);
  };
  if (owned) {
    return React.createElement(React.Fragment, {
                children: null
              }, React.createElement(PriceDisplay$WildCards.make, {
                    chain: chain,
                    animal: animal
                  }), React.createElement(ActionButtons$WildCards.UpdatePrice.make, {
                    animal: animal
                  }), React.createElement("br", undefined), React.createElement(ActionButtons$WildCards.UpdateDeposit.make, { }), React.createElement("br", undefined), React.createElement(Validate$WildCards.make, { }));
  }
  var endDateMoment = Animal$WildCards.isLaunched(chain, animal);
  var tmp;
  if (typeof endDateMoment === "number") {
    tmp = endDateMoment !== 0 ? React.createElement(RimbleUi.Loader, { }) : price(undefined);
  } else {
    var endDateMoment$1 = endDateMoment[0];
    tmp = React.createElement(Dapp$DisplayAfterDate, {
          endDateMoment: endDateMoment$1,
          beforeComponent: React.createElement(React.Fragment, {
                children: React.createElement(CountDown$WildCards.make, {
                      endDateMoment: endDateMoment$1
                    })
              }),
          afterComponent: price(undefined)
        });
  }
  return React.createElement(React.Fragment, {
              children: tmp
            });
}

var AnimalActionsOnDetailsPage = {
  make: Dapp$AnimalActionsOnDetailsPage
};

function Dapp$DetailsViewAnimal(Props) {
  var chain = Props.chain;
  var animal = Props.animal;
  var orgId = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardOrgId(animal), "");
  var clearAndPush = RootProvider$WildCards.useClearNonUrlStateAndPushRoute(undefined);
  var image = Animal$WildCards.useAvatar(animal);
  var orgBadge = Animal$WildCards.useGetOrgBadgeImage(animal);
  var isLaunched = Animal$WildCards.isLaunched(chain, animal);
  var displayAnimal = function (animalImage) {
    return React.createElement("div", {
                className: Styles$WildCards.positionRelative
              }, Curry._1(animalImage, undefined), typeof isLaunched === "number" ? (
                  isLaunched !== 0 ? null : React.createElement("div", {
                          className: Styles$WildCards.overlayFlameImg
                        }, React.createElement(Dapp$Streak, {
                              chain: chain,
                              animal: animal
                            }))
                ) : React.createElement(Dapp$DisplayAfterDate, {
                      endDateMoment: isLaunched[0],
                      beforeComponent: null,
                      afterComponent: React.createElement("div", {
                            className: Styles$WildCards.overlayFlameImg
                          }, React.createElement(Dapp$Streak, {
                                chain: chain,
                                animal: animal
                              }))
                    }), React.createElement("div", {
                    className: Styles$WildCards.overlayBadgeImg,
                    onClick: (function (e) {
                        e.stopPropagation();
                        e.preventDefault();
                        return Curry._1(clearAndPush, "#org/" + orgId);
                      })
                  }, React.createElement("img", {
                        className: Styles$WildCards.flameImg,
                        src: orgBadge
                      })));
  };
  return React.createElement(React.Fragment, {
              children: null
            }, displayAnimal((function (param) {
                    return React.createElement("img", {
                                className: Styles$WildCards.ownedAnimalImg,
                                src: image
                              });
                  })), React.createElement("h2", undefined, Globals$WildCards.restr(Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardName(animal), "Loading"))), React.createElement(Dapp$AnimalActionsOnDetailsPage, {
                  chain: chain,
                  animal: animal
                }));
}

var DetailsViewAnimal = {
  make: Dapp$DetailsViewAnimal
};

function Dapp$DetailsView(Props) {
  var chain = Props.chain;
  var optionAnimal = Props.optionAnimal;
  BrowserLogger.infoWithData("Dapp-WildCards", "optionAnimal", /* tuple */[
        "a",
        optionAnimal
      ]);
  if (optionAnimal !== undefined) {
    return React.createElement(Dapp$DetailsViewAnimal, {
                chain: chain,
                animal: Caml_option.valFromOption(optionAnimal)
              });
  } else {
    return React.createElement("div", undefined, React.createElement("h1", undefined, "We are unable to find that animal in our system."), React.createElement("p", undefined, Globals$WildCards.restr("Please check the spelling and try again.")));
  }
}

var DetailsView = {
  make: Dapp$DetailsView
};

function Dapp$DefaultLook(Props) {
  var isGqlLoaded = Props.isGqlLoaded;
  var url = ReasonReactRouter.useUrl(undefined, undefined);
  var match = url.hash.split("/");
  var tmp;
  var exit = 0;
  var animalStr;
  var len = match.length;
  if (len >= 5) {
    exit = 1;
  } else {
    switch (len) {
      case 0 :
      case 1 :
          exit = 1;
          break;
      case 2 :
          var match$1 = match[0];
          if (match$1 === "details") {
            var animalStr$1 = match[1];
            animalStr = animalStr$1;
            exit = 2;
          } else {
            exit = 1;
          }
          break;
      case 3 :
          var match$2 = match[0];
          if (match$2 === "explorer") {
            var match$3 = match[1];
            if (match$3 === "details") {
              var animalStr$2 = match[2];
              animalStr = animalStr$2;
              exit = 2;
            } else {
              exit = 1;
            }
          } else {
            exit = 1;
          }
          break;
      case 4 :
          var match$4 = match[0];
          if (match$4 === "explorer") {
            var match$5 = match[1];
            if (match$5 === "details") {
              var animalStr$3 = match[2];
              var match$6 = match[3];
              if (match$6 === "") {
                animalStr = animalStr$3;
                exit = 2;
              } else {
                exit = 1;
              }
            } else {
              exit = 1;
            }
          } else {
            exit = 1;
          }
          break;
      
    }
  }
  switch (exit) {
    case 1 :
        tmp = React.createElement(React.Fragment, {
              children: null
            }, React.createElement(Dapp$AnimalCarousel, {
                  isGqlLoaded: isGqlLoaded
                }), React.createElement(RimbleUi.Box, {
                  children: isGqlLoaded ? React.createElement(TotalRaised$WildCards.make, { }) : null,
                  className: Styles$WildCards.dappImagesCounteractOffset
                }));
        break;
    case 2 :
        BrowserLogger.infoWithData("Dapp-WildCards", "the animalString", /* tuple */[
              "a",
              animalStr
            ]);
        var optionAnimal = TokenId$WildCards.make(animalStr);
        var chain = Belt_Option.mapWithDefault(optionAnimal, /* MainnetQuery */2, Animal$WildCards.getChainIdFromAnimalId);
        tmp = React.createElement(Dapp$DetailsView, {
              chain: chain,
              optionAnimal: TokenId$WildCards.make(animalStr)
            });
        break;
    
  }
  return React.createElement("div", {
              className: Styles$WildCards.centerText
            }, tmp);
}

var DefaultLook = {
  make: Dapp$DefaultLook
};

function Dapp$DefaultLeftPanel(Props) {
  var translationModeContext = ReactTranslate$WildCards.useTranslationModeContext(undefined);
  var translation = ReactTranslate.useTranslate(translationModeContext.translationMode);
  return React.createElement(React.Fragment, {
              children: null
            }, React.createElement("h1", {
                  className: Styles$WildCards.heading
                }, React.createElement("span", {
                      className: Styles$WildCards.colorBlue
                    }, Globals$WildCards.restr(translation("bluetext"))), React.createElement("br", undefined), Globals$WildCards.restr(translation("ethereum")), React.createElement("br", undefined), React.createElement("span", {
                      className: Styles$WildCards.colorGreen
                    }, Globals$WildCards.restr("conservation")), Globals$WildCards.restr(" " + translation("tokens"))), React.createElement("hr", undefined), React.createElement("h3", {
                  className: Styles$WildCards.subHeading
                }, Globals$WildCards.restr(translation("subHeading"))));
}

var DefaultLeftPanel = {
  make: Dapp$DefaultLeftPanel
};

function Dapp$AnimalInfoStats(Props) {
  var chain = Props.chain;
  var animal = Props.animal;
  var animalName = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardName(animal), "Loading");
  var daysHeld = QlHooks$WildCards.useDaysHeld(chain, animal);
  var currentPatron = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.usePatron(chain, animal), "Loading");
  var userId = UserProvider$WildCards.useDisplayName(currentPatron);
  var displayName = UserProvider$WildCards.useDisplayName(currentPatron);
  var displayNameStr = UserProvider$WildCards.displayNameToString(displayName);
  var userIdType;
  switch (userId.tag | 0) {
    case /* TwitterHandle */0 :
        userIdType = "verified twitter account";
        break;
    case /* ThreeBoxName */1 :
        userIdType = "3box name";
        break;
    case /* EthAddress */2 :
        userIdType = "public address";
        break;
    
  }
  var clearAndPush = RootProvider$WildCards.useClearNonUrlStateAndPushRoute(undefined);
  var currentUsdEthPrice = UsdPriceProvider$WildCards.useUsdPrice(undefined);
  var match = Globals$WildCards.mapd(QlHooks$WildCards.useRemainingDepositEth(chain, currentPatron), /* tuple */[
        "Loading",
        "Loading"
      ], (function (a) {
          return /* tuple */[
                  Globals$WildCards.toFixedWithPrecisionNoTrailingZeros(Globals$WildCards.$pipe$pipe$pipe$pipe(Belt_Float.fromString(Eth$WildCards.get(a, /* Eth */Block.__(0, [/* ether */-193685050]))), 0.0), 9),
                  Globals$WildCards.mapd(currentUsdEthPrice, "Loading", (function (usdEthRate) {
                          return Eth$WildCards.get(a, /* Usd */Block.__(1, [
                                        usdEthRate,
                                        2
                                      ]));
                        }))
                ];
        }));
  var match$1 = Globals$WildCards.mapd(QlHooks$WildCards.useAmountRaisedToken(chain, animal), /* tuple */[
        "Loading",
        "Loading"
      ], (function (a) {
          return /* tuple */[
                  Globals$WildCards.toFixedWithPrecisionNoTrailingZeros(Globals$WildCards.$pipe$pipe$pipe$pipe(Belt_Float.fromString(Eth$WildCards.get(a, /* Eth */Block.__(0, [/* ether */-193685050]))), 0.0), 9),
                  Globals$WildCards.mapd(currentUsdEthPrice, "Loading", (function (usdEthRate) {
                          return Eth$WildCards.get(a, /* Usd */Block.__(1, [
                                        usdEthRate,
                                        2
                                      ]));
                        }))
                ];
        }));
  var foreclosureTime = QlHooks$WildCards.useForeclosureTime(chain, currentPatron);
  var definiteTime = Globals$WildCards.mapd(foreclosureTime, /* Loading */0, (function (a) {
          return /* Date */[a];
        }));
  var ratio = QlHooks$WildCards.usePledgeRate(chain, animal);
  var optCurrentPrice = PriceDisplay$WildCards.usePrice(chain, animal);
  var match$2 = optCurrentPrice !== undefined ? /* tuple */[
      Globals$WildCards.toFixedWithPrecisionNoTrailingZeros(Accounting$WildCards.defaultZeroF(Belt_Float.fromString(optCurrentPrice[0])) * ratio, 4),
      undefined
    ] : /* tuple */[
      undefined,
      undefined
    ];
  var optMonthlyPledgeUsd = match$2[1];
  var optMonthlyPledgeEth = match$2[0];
  var monthlyRate = (ratio * 100).toString();
  var tmp;
  if (definiteTime) {
    var date = definiteTime[0];
    tmp = React.createElement("p", undefined, React.createElement("small", undefined, React.createElement("strong", undefined, Globals$WildCards.restr("Foreclosure date: "), React.createElement(RimbleUi.Tooltip, {
                      message: "This is the date the deposit will run out and the animal and the current owner will lose ownership of " + animalName,
                      placement: "top",
                      children: React.createElement("span", undefined, Globals$WildCards.restr("ⓘ"))
                    }))), React.createElement("br", undefined), Globals$WildCards.restr(date.format("LLLL")), React.createElement("br", undefined), React.createElement("small", undefined, Globals$WildCards.restr("( "), React.createElement(CountDown$WildCards.make, {
                  endDateMoment: date
                }), Globals$WildCards.restr(")")));
  } else {
    tmp = null;
  }
  var tmp$1;
  if (daysHeld !== undefined) {
    var timeAquiredString = daysHeld[1].toISOString(undefined);
    tmp$1 = React.createElement("p", undefined, React.createElement("small", undefined, React.createElement("strong", undefined, Globals$WildCards.restr("Days Held: "), React.createElement(RimbleUi.Tooltip, {
                      message: "This is the amount of time " + (String(animalName) + (" has been held. It was acquired on the " + (String(timeAquiredString) + "."))),
                      placement: "top",
                      children: React.createElement("span", undefined, Globals$WildCards.restr("ⓘ"))
                    }))), React.createElement("br", undefined), Globals$WildCards.restr(daysHeld[0].toFixed()), React.createElement("br", undefined));
  } else {
    tmp$1 = null;
  }
  return React.createElement(React.Fragment, {
              children: null
            }, React.createElement("div", undefined, React.createElement("small", undefined, React.createElement("strong", undefined, Globals$WildCards.restr("Monthly Pledge (at " + (monthlyRate + "%): ")), React.createElement(RimbleUi.Tooltip, {
                              message: "This is the monthly percentage contribution of " + (animalName + "'s sale price that will go towards conservation of at risk animals. This is deducted continuously from the deposit and paid by the owner of the animal"),
                              placement: "top",
                              children: React.createElement("span", undefined, Globals$WildCards.restr("ⓘ"))
                            }))), React.createElement("br", undefined), optMonthlyPledgeEth !== undefined ? Globals$WildCards.restr(optMonthlyPledgeEth + " ETH") : React.createElement(RimbleUi.Loader, { }), React.createElement("br", undefined), React.createElement("small", undefined, optMonthlyPledgeUsd !== undefined ? Globals$WildCards.restr("(" + (Caml_option.valFromOption(optMonthlyPledgeUsd) + " USD)")) : null)), React.createElement("p", undefined, React.createElement("small", undefined, React.createElement("strong", undefined, Globals$WildCards.restr("Current Patron: "), React.createElement(RimbleUi.Tooltip, {
                              message: "This is the " + (String(userIdType) + " of the current owner"),
                              placement: "top",
                              children: React.createElement("span", undefined, Globals$WildCards.restr("ⓘ"))
                            }))), React.createElement("br", undefined), React.createElement("a", {
                      onClick: (function (e) {
                          e.preventDefault();
                          return Curry._1(clearAndPush, "/#user/" + (String(currentPatron) + ""));
                        })
                    }, Globals$WildCards.restr(displayNameStr))), React.createElement("p", undefined, React.createElement("small", undefined, React.createElement("strong", undefined, Globals$WildCards.restr("Available Deposit: "), React.createElement(RimbleUi.Tooltip, {
                              message: "This is the amount the owner has deposited to pay their monthly contribution",
                              placement: "top",
                              children: React.createElement("span", undefined, Globals$WildCards.restr("ⓘ"))
                            }))), React.createElement("br", undefined), Globals$WildCards.restr(match[0] + " ETH"), React.createElement("br", undefined), React.createElement("small", undefined, Globals$WildCards.restr("(" + (match[1] + " USD)")))), React.createElement("p", undefined, React.createElement("small", undefined, React.createElement("strong", undefined, Globals$WildCards.restr(animalName + "'s Patronage: "), React.createElement(RimbleUi.Tooltip, {
                              message: "This is the total contribution that has been raised thanks to the wildcard, " + animalName,
                              placement: "top",
                              children: React.createElement("span", undefined, Globals$WildCards.restr("ⓘ"))
                            }))), React.createElement("br", undefined), Globals$WildCards.restr(match$1[0] + " ETH"), React.createElement("br", undefined), React.createElement("small", undefined, Globals$WildCards.restr("(" + (match$1[1] + " USD)")))), tmp, tmp$1);
}

var AnimalInfoStats = {
  make: Dapp$AnimalInfoStats
};

function Dapp$UnlaunchedAnimalInfo(Props) {
  var chain = Props.chain;
  var endDateMoment = Props.endDateMoment;
  var animal = Props.animal;
  var animalName = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardName(animal), "Loading");
  var ratio = QlHooks$WildCards.usePledgeRate(chain, animal);
  var monthlyRate = (ratio * 100).toString();
  return React.createElement(Dapp$DisplayAfterDate, {
              endDateMoment: endDateMoment,
              beforeComponent: React.createElement(React.Fragment, {
                    children: null
                  }, React.createElement("h2", undefined, "This animal will launch in:"), React.createElement(CountDown$WildCards.make, {
                        endDateMoment: endDateMoment
                      }), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("br", undefined), ratio === 0 ? React.createElement("p", undefined, Globals$WildCards.restr("The monthly pledge rate will be revealed at launch.")) : React.createElement(React.Fragment, undefined, React.createElement("small", undefined, React.createElement("strong", undefined, Globals$WildCards.restr("Monthly Pledge Rate:"), React.createElement(RimbleUi.Tooltip, {
                                      message: "This is the monthly percentage contribution of " + (animalName + "'s sale price that will go towards conservation of at risk animals. This is deducted continuously from the deposit and paid by the owner of the animal"),
                                      placement: "top",
                                      children: React.createElement("span", undefined, Globals$WildCards.restr("ⓘ"))
                                    }))), React.createElement("br", undefined), Globals$WildCards.restr(monthlyRate + " %"))),
              afterComponent: React.createElement(Dapp$AnimalInfoStats, {
                    chain: chain,
                    animal: animal
                  })
            });
}

var UnlaunchedAnimalInfo = {
  make: Dapp$UnlaunchedAnimalInfo
};

function Dapp$AnimalInfo(Props) {
  var chain = Props.chain;
  var animal = Props.animal;
  var animalDescription = Globals$WildCards.$pipe$pipe$pipe$pipe(QlHooks$WildCards.useWildcardDescription(animal), ["Loading"]);
  var optAnimalMedia = Animal$WildCards.useAlternateImage(animal);
  var animalStatus = Animal$WildCards.useTokenStatus(chain, animal);
  var tmp;
  if (typeof animalStatus === "number") {
    tmp = React.createElement(RimbleUi.Loader, { });
  } else {
    switch (animalStatus.tag | 0) {
      case /* WaitingForLaunch */0 :
          tmp = React.createElement(Dapp$UnlaunchedAnimalInfo, {
                chain: chain,
                endDateMoment: animalStatus[0],
                animal: animal
              });
          break;
      case /* Launched */1 :
          tmp = React.createElement(Info$WildCards.Auction.make, {
                chain: chain,
                tokenId: animal,
                abandoned: false,
                auctionStartTime: animalStatus[0]
              });
          break;
      case /* Owned */2 :
          tmp = React.createElement(Info$WildCards.make, {
                chain: chain,
                tokenId: animal
              });
          break;
      case /* Foreclosed */3 :
          tmp = React.createElement(Info$WildCards.Auction.make, {
                chain: chain,
                tokenId: animal,
                abandoned: true,
                auctionStartTime: animalStatus[0]
              });
          break;
      
    }
  }
  return React.createElement(RimbleUi.Box, {
              m: 5,
              children: React.createElement(ReactTabs.Tabs, {
                    children: null
                  }, React.createElement(ReactTabs.TabList, {
                        children: null
                      }, React.createElement(ReactTabs.Tab, {
                            children: "Story"
                          }), React.createElement(ReactTabs.Tab, {
                            children: "Details"
                          }), Globals$WildCards.mapd(optAnimalMedia, null, (function (param) {
                              return React.createElement(ReactTabs.Tab, {
                                          children: "Media"
                                        });
                            }))), React.createElement(ReactTabs.TabPanel, {
                        children: null
                      }, React.createElement("h2", undefined, "Story"), React.createElement("div", {
                            className: Curry._1(Css.style, /* :: */[
                                  Css.maxHeight(/* `em */[
                                        22632,
                                        26
                                      ]),
                                  /* :: */[
                                    Css.overflow(/* scroll */-949692403),
                                    /* [] */0
                                  ]
                                ])
                          }, Belt_Array.mapWithIndex(animalDescription, (function (i, paragraphText) {
                                  return React.createElement("p", {
                                              key: String(i)
                                            }, paragraphText);
                                }))), TokenId$WildCards.toString(animal) === "13" ? React.createElement("a", {
                              href: "/#dao"
                            }, React.createElement("span", {
                                  className: Curry._1(Css.style, /* :: */[
                                        Css.color(Css.hex("72c7d7")),
                                        /* [] */0
                                      ])
                                }, Globals$WildCards.restr("Vote for your favourite conservation"))) : null), React.createElement(ReactTabs.TabPanel, {
                        children: tmp
                      }), React.createElement(ReactTabs.TabPanel, {
                        children: Globals$WildCards.mapd(optAnimalMedia, null, (function (media) {
                                return React.createElement("img", {
                                            className: Curry._1(Css.style, /* :: */[
                                                  Css.width(/* `percent */[
                                                        -119887163,
                                                        100
                                                      ]),
                                                  /* [] */0
                                                ]),
                                            src: Animal$WildCards.cdnBase + media
                                          });
                              }))
                      }))
            });
}

var AnimalInfo = {
  make: Dapp$AnimalInfo
};

function Dapp(Props) {
  var currentAnimal = Props.currentAnimal;
  var nonUrlRouting = RootProvider$WildCards.useNonUrlState(undefined);
  var clearNonUrlState = RootProvider$WildCards.useClearNonUrlState(undefined);
  var isDetailView = Router$WildCards.useIsDetails(undefined);
  var optAnimalForDetails = Router$WildCards.useAnimalForDetails(undefined);
  var tmp;
  if (typeof nonUrlRouting === "number") {
    switch (nonUrlRouting) {
      case /* UserVerificationScreen */0 :
          tmp = React.createElement("div", {
                className: Curry._1(Css.style, /* :: */[
                      Css.position(/* relative */903134412),
                      /* [] */0
                    ])
              }, React.createElement(RimbleUi.Button.Text, {
                    onClick: (function (param) {
                        return Curry._1(clearNonUrlState, undefined);
                      }),
                    icononly: true,
                    icon: "Close",
                    color: "moon-gray",
                    position: "absolute",
                    top: 0,
                    right: 0,
                    m: 1
                  }), React.createElement(React.Suspense, {
                    children: React.createElement(LazyThreeBoxUpdate$WildCards.Lazy.make, { }),
                    fallback: React.createElement(RimbleUi.Loader, { })
                  }));
          break;
      case /* UpdateDepositScreen */1 :
          tmp = React.createElement("div", {
                className: Curry._1(Css.style, /* :: */[
                      Css.position(/* relative */903134412),
                      /* [] */0
                    ])
              }, React.createElement(RimbleUi.Button.Text, {
                    onClick: (function (param) {
                        return Curry._1(clearNonUrlState, undefined);
                      }),
                    icononly: true,
                    icon: "Close",
                    color: "moon-gray",
                    position: "absolute",
                    top: 0,
                    right: 0,
                    m: 1
                  }), React.createElement(UpdateDeposit$WildCards.make, {
                    closeButtonText: "Back to view Animal",
                    chain: Belt_Option.mapWithDefault(currentAnimal, /* MainnetQuery */2, Animal$WildCards.getChainIdFromAnimalId)
                  }));
          break;
      case /* NoExtraState */2 :
          if (optAnimalForDetails !== undefined) {
            var animal = Caml_option.valFromOption(optAnimalForDetails);
            tmp = React.createElement(Dapp$AnimalInfo, {
                  chain: Animal$WildCards.getChainIdFromAnimalId(animal),
                  animal: animal
                });
          } else {
            tmp = React.createElement(Dapp$DefaultLeftPanel, { });
          }
          break;
      
    }
  } else {
    switch (nonUrlRouting.tag | 0) {
      case /* LoginScreen */0 :
          tmp = React.createElement(Login$WildCards.make, { });
          break;
      case /* UpdatePriceScreen */1 :
          var animal$1 = nonUrlRouting[0];
          tmp = React.createElement("div", {
                className: Curry._1(Css.style, /* :: */[
                      Css.position(/* relative */903134412),
                      /* [] */0
                    ])
              }, React.createElement(RimbleUi.Button.Text, {
                    onClick: (function (param) {
                        return Curry._1(clearNonUrlState, undefined);
                      }),
                    icononly: true,
                    icon: "Close",
                    color: "moon-gray",
                    position: "absolute",
                    top: 0,
                    right: 0,
                    m: 1
                  }), React.createElement(UpdatePrice$WildCards.make, {
                    tokenId: animal$1,
                    chain: Animal$WildCards.getChainIdFromAnimalId(animal$1)
                  }));
          break;
      case /* BuyScreen */2 :
          var animal$2 = nonUrlRouting[0];
          tmp = React.createElement("div", {
                className: Curry._1(Css.style, /* :: */[
                      Css.position(/* relative */903134412),
                      /* [] */0
                    ])
              }, React.createElement(RimbleUi.Button.Text, {
                    onClick: (function (param) {
                        return Curry._1(clearNonUrlState, undefined);
                      }),
                    icononly: true,
                    icon: "Close",
                    color: "moon-gray",
                    position: "absolute",
                    top: 0,
                    right: 0,
                    m: 1
                  }), React.createElement(Buy$WildCards.make, {
                    chain: Animal$WildCards.getChainIdFromAnimalId(animal$2),
                    tokenId: animal$2
                  }));
          break;
      case /* AuctionScreen */3 :
          var animal$3 = nonUrlRouting[0];
          tmp = React.createElement("div", {
                className: Curry._1(Css.style, /* :: */[
                      Css.position(/* relative */903134412),
                      /* [] */0
                    ])
              }, React.createElement(RimbleUi.Button.Text, {
                    onClick: (function (param) {
                        return Curry._1(clearNonUrlState, undefined);
                      }),
                    icononly: true,
                    icon: "Close",
                    color: "moon-gray",
                    position: "absolute",
                    top: 0,
                    right: 0,
                    m: 1
                  }), React.createElement(Buy$WildCards.make, {
                    chain: Animal$WildCards.getChainIdFromAnimalId(animal$3),
                    tokenId: animal$3
                  }));
          break;
      
    }
  }
  return React.createElement(RimbleUi.Flex, {
              children: null,
              flexWrap: isDetailView ? "wrap-reverse" : "wrap",
              alignItems: "start"
            }, React.createElement(RimbleUi.Box, {
                  p: 1,
                  children: React.createElement(React.Fragment, {
                        children: tmp
                      }),
                  width: [
                    1,
                    1,
                    0.5
                  ]
                }), React.createElement(RimbleUi.Box, {
                  p: 1,
                  children: React.createElement(Dapp$DefaultLook, {
                        isGqlLoaded: true
                      }),
                  width: [
                    1,
                    1,
                    0.5
                  ],
                  className: Curry._1(Css.style, /* :: */[
                        Css.media("(max-width: 831px)", /* :: */[
                              Css.overflow(/* hidden */-862584982),
                              /* [] */0
                            ]),
                        /* [] */0
                      ])
                }));
}

var make$1 = Dapp;

export {
  flameImg ,
  ShareSocial ,
  EditButton ,
  Streak ,
  DisplayAfterDate ,
  AuctionDisplay ,
  AuctionDetails ,
  BasicAnimalDisplay ,
  AnimalOnLandingPage ,
  CarouselAnimal ,
  AnimalCarousel ,
  AnimalActionsOnDetailsPage ,
  DetailsViewAnimal ,
  DetailsView ,
  DefaultLook ,
  DefaultLeftPanel ,
  AnimalInfoStats ,
  UnlaunchedAnimalInfo ,
  AnimalInfo ,
  make$1 as make,
  
}
/* make Not a pure module */
